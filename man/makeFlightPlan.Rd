% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/makeFlightPlan.R
\name{makeFlightPlan}
\alias{makeFlightPlan}
\title{Tool to generate litchi compatible autonomous flightplans focussing an optimal picture retrieval for DSM/DEM and orthophoto generation 
with the phantom 3 UAV}
\usage{
makeFlightPlan(rootDir = "~", workingDir = "uav",
  missionName = "litchi_autoflightcontrol", surveyArea = NULL,
  launchAltitude = -9999, followSurface = FALSE, demFn = NULL,
  altFilter = 1, flightPlanMode = "waypoints", flightAltitude = 50,
  presetFlightTask = "remote", curvesize = 0, rotationdir = 0,
  gimbalmode = 0, gimbalpitchangle = -90, overlap = 0.6, uavViewDir = 0,
  maxSpeed = 40, picRate = 2, heatMap = FALSE, picFootprint = TRUE,
  followSurfaceRes = -9999, batteryTime = 18, windCondition = 1,
  actiontype = NULL, actionparam = NULL)
}
\arguments{
\item{missionName}{base string for mission filenames}

\item{surveyArea}{you may provide either the coordinates by 
c(lon1,lat1,lon2,lat2,lon3,lat3,launchLat,launchLon) or
an OGR compatible file (preferably geoJSON or KML) with
at least 4 coordinates that describe the flight area. 
The fourth coordinate is the launch position.
 You will find further explanation under the \link{seealso}.}

\item{launchAltitude}{absolute altitude of launching position. 
It will overwrite the DEM based estimation if any other value than -9999}

\item{followSurface}{\code{boolean}  TRUE performs an altitude correction 
of the missions flight altitude using additional DEM data. 
If no DEM data is provided and \code{followSurface} is TRUE, 
SRTM data will be downloaded and used
Further explanation at \link{seealso}}

\item{demFn}{filname of the corresponding DEM data file}

\item{altFilter}{if \code{followingTerrain} is equal \code{TRUE} then 
\code{altFilter} is the treshold value of accepted altitude difference bewteen two waypoints in meter.
 If this value is not exceeded the waypoint is omitted due to the fact that only 99 waypoints per mission are allowed.}

\item{flightPlanMode}{type of flightplan. Available are: \code{"waypoints"}, 
\code{"track"}, \code{"manual"}.}

\item{flightAltitude}{set the default flight altitude of the mission. It is 
assumed that the UAV is started at the highest point of the surveyArea 
otherwise you have to defined the position of launching.}

\item{presetFlightTask}{set the camera action at each waypoint.
 Options are: 
\code{"simple_ortho"} takes one picture/waypoint, 
\code{"multi_ortho"} takes 4 picture at a waypoint, two vertically down and two in forward and backward viewing direction and an angele of -60deg,
\code{"simple_pano"} takes a 360 deg panorama picture and 
\code{"remote"} which assumes that the camera is controlled by the remote control (RC)}

\item{curvesize}{control parameter for the curve angle at waypoints. 
By default it is set to (\code{= 0.0}). If set to \code{-99} it will be 
calculated from the swath width of the pictures. NOTE This makes only sense for 
\code{followingTerrain = TRUE} to smooth curves.
For \code{flightPlanMode = "waypoint"} camera actions are DISABLED during curve flights.}

\item{rotationdir}{camera control parameter set the UAV basic turn direction to right (0) or left (1)}

\item{gimbalmode}{camera control parameter 
\code{0} deactivates the gimbal control
\code{1} activates the gimbale for focussing POIs
\code{2} activates the gimbale for focus and interpolate a field of view in an angel of \code{gimbalpitchangle}}

\item{gimbalpitchangle}{vertical angle of camera  \code{+30°..-90°}}

\item{overlap}{overlapping of the pictures in percent (1.0 = 100)}

\item{uavViewDir}{viewing directon of camera default is \code{0}}

\item{maxSpeed}{cruising speed}

\item{picRate}{fastest stable interval (s) for shooting pictures}

\item{heatMap}{switch for calculating the overlapping factor on a raster map}

\item{picFootprint}{switch for calculating the footprint at all waypoints}

\item{followSurfaceRes}{horizontal step distance for analysing the DEM altitudes}

\item{batteryTime}{estimated life time of battery}

\item{windCondition}{1= calm 2= light air 1-5km/h, 3= light breeze 6-11km/h, 4=gentle breeze 12-19km/h 5= moderate breeze 20-28km/h}

\item{actiontype}{individual actionype settings of the camera c(1,1,...)}

\item{actionparam}{corresponding parameter for the above individual actiontype c(0,0,...)}
}
\description{
makeFlightPlan creates intermediate flight control files for the dji
  phantom x UAVs. It is designed for the  \code{litchi} flight control app. The
  reason using litchi is on the one hand that litchi is more straightforward to use 
  on the other hand (and much more important) that lichti provides additionally to the 
  cloud based mission planer an offline mission planer tool to import a csv formated waypoint
  file based to perform autonomous flights. \cr
  From convenience reasons some presets and default settings are defined.
}
\note{
To define a flight area you have to provide either 4 Points (or 3 lines). 
  You may take more complex vectors like a multi point polygon,
  but only the first 4 coordinates x1, x2, x3 and x4 (for the launching position) 
  are used in exactly this order. 
  If you take a rectangle the 4th corner coordinate will be the launching point!
  \cr\cr
  The concept is looking like the following sketch.
 \preformatted{ 
  x2------x3           x2-------x1
  | a                 /
  |                  /
  |   x4            / x4    
  |  /             / /
  x1/             x3/
  }
  This coordinates the length of the line and the angle are used to calculate extend and paralells 
  of the flightplan according to the flight altitude, overlap etc. Note the flight direction depends on 
  the order of the points. If the \code{flightPlanMode} is equal \code{tracks}.
  \cr\cr
  The result look like this.
  
 \preformatted{ 
 
  #--#  #-->             #--#  #
  |  |  |               /  /  /
  |  |  |              /  /  /
  |  |  |             /  /  / 
  #  #--#         <--#  #--#
  }
 If \code{flightPlanMode} is equal \code{waypoints} the result is an equal spatial distribution of waypoints:
 \preformatted{ 
 
  #--#  #-->             #--#  #
  |  |  |               /  /  /
  #  #  #              #  #  #
  |  |  |             /  /  / 
  #  #--#         <--#  #--#
  
  }
  
 
  \code{waypoints} is optimal for autonoumous flights under calm conditions in complex terrain 
  because the camara takes a picture at every waypoint\cr
  \code{track} is optimal for relatively plain areas and automatically triggered picture capturing
  Note: Automatically picture capturing in a time interval works only within the range of the remote control. 
  because the the uav needs a trigger signal for taking pictures.
  \cr
  \cr
  The \code{followSurface} switch is used to adapt the fixed flight altitude into a terrain following flight altitude.\cr 
  ----------------------------------------------------------------------------------------------------------\cr
  NOTE: You have to be aware that the DJI uav is calibrating the altitude at the launch position in the field!
  So you need either a correct coordinate altitude or a high resolution DEM to get a good! estimation of the lauch position and altitude. 
  You must choose a clearly defined and reliable launching position both in the map and the field. If you fail I made the experience that the aircraft 
  probably will hit the terrain...\cr
  ----------------------------------------------------------------------------------------------------------\cr\cr
 How it works. Let us assume a defined flightaltitude of 50 m. 
 According to the launching point altitude the uav will act like the following sketch shows:
  
\preformatted{ 
                     
  ............... x_(uav)_x ........... uav started at 30 m altitude results in 
                                           a "real" flight altitude of 30m + 50m => 80m
  
  
                  ___60m____
                 |          | 
         30m _x__|          | 
        ____|               |___  
    ___|                        |____ 
 
  
                 ___60m____
      ..........|          |............ uav started at 0 m altitude results in 
             ___|          |___          "real" flight altitude of 50m above 0m
        ____|                  |  
    ___|                       |__x__ 0m
  }  
 To avoid negative impacts from the P3 auto calibration, the launch altitude is used to
 correct the flight altitude according to: \cr
 maximumAltitude_of_surveyArea + altitude_of_launchposition\cr
 So the adapted flight altitude is always seen as the flight altitude above the highest terrain altitude:
  \preformatted{
                 
 ...................................... real altitude of uav 110 m
         

                 ___60m____ 
                |          |
         30m _x_|          |___
        ____|                  |  
    ___|                       |______ 
  }  
 To get a fixed scale flight the launch altitude is used to correct the flight altitude according to   maximumAltitude of surveyArea + altitude of launchposition. With the setting auf terrainfoollowing = true tis is calculated for each waypoint.  . So the adapted flight altitude looks like:
  \preformatted{
                 
                 ..........
                |          |
            ....|          |.... 
       ....|     ___60m____    |    
  ....|         |          |   |....... real altitude of uav 50m
         30m _x_|          |___
        ____|                  |  
    ___|                       |___x___ 0m
  }
}
\examples{

# Please keep in mind that there is a bunch of interdependent parameter settings.
# Hence here are just some typical examples. 

# (1) simple flight, 50 meters above ground 
# assuming a flat topography,
# generating a heatmap to estimate overlapping
fp<-makeFlightPlan(surveyArea=c(50.80801,8.72993,50.80590,8.731153,50.80553,8.73472,50.8055,8.734))

# legend  
# red circle      the planned launching position of the uav. 
# blue circles    the waypoint position
# blue rectangles the corresponding field of view (fov)at the ground
# raster[[fp2]]   the digitial elevation model (DEM)
# raster[[fp5]]   a heatmap abundance of pictures/pixel

mapview(fp[[2]])+mapview(fp[[4]],color="darkblue", alpha.regions = 0.1,lwd=0.5)+mapview(fp[[1]],zcol = "altitude",lwd=1,cex=4)+mapview(fp[[3]],color="red",cex=5)+mapview(fp[[5]],legend=TRUE)


# (2) adapting viewing angle of the camera, adding coverage map, switching to track mode
fp<-makeFlightPlan(surveyArea=c(50.80801,8.72993,50.80590,8.731153,50.80553,8.73472,50.80709,8.734),
                   uavViewDir=30,
                   flightPlanMode="track",
                   heatMap=TRUE)
                  
mapview(fp[[2]])+mapview(fp[[4]],color="darkblue", alpha.regions = 0.1,lwd=0.5)+mapview(fp[[1]],zcol = "altitude",lwd=1,cex=4)+mapview(fp[[3]],color="red",cex=5)+mapview(fp[[5]],legend=TRUE

# (3) increas of the overlap
fp<-makeFlightPlan(surveyArea=c(50.80801,8.72993,50.80590,8.731153,50.80553,8.73472,50.80709,8.734),
                   overlap=0.8,
                   uavViewDir=30,
                   flightPlanMode="track",
                   heatMap=TRUE)
                  
mapview(fp[[4]],color="darkblue", alpha.regions = 0.1,lwd=0.5)+mapview(fp[[1]],zcol = "altitude",lwd=1,cex=4)+mapview(fp[[3]],color="red",cex=5)+mapview(fp[[5]],legend=TRUE)


# (4) terrain following flightplan, add DEM
fp<-makeFlightPlan(surveyArea = c(50.80801,8.72993,50.80590,8.731153,50.80553,8.73472,50.80709,8.734), 
                   followSurface = TRUE,
                   demFn = "inst/data/mrbiko.tif",
                   )
mapview(fp[[4]],color="darkblue", alpha.regions = 0.1,lwd=0.5)+mapview(fp[[1]],zcol = "altitude",lwd=1,cex=4,)+mapview(fp[[3]],color="red",cex=5)

# (5) same as (4) but with lower flight altitude TAKE CARE!
fp<-makeFlightPlan(surveyArea=c(50.80801,8.72993,50.80590,8.731153,50.80553,8.73472,50.8055,8.734), 
                   followSurface = TRUE, 
                   flightAltitude = 25, 
                   demFn = "inst/data/mrbiko.tif")

mapview(fp[[4]],color="darkblue", alpha.regions = 0.1,lwd=0.5)+mapview(fp[[1]],zcol = "altitude",lwd=1,cex=4,)+mapview(fp[[3]],color="red",cex=5)

 
# (6) use of external vector data to define the surveyArea...
# digitize flight area using leafDraw()
leafDraw(preset="uav")

## assuming resulting file is names "uav.json"
fp<-makeFlightPlan(surveyArea = "~/uav.json",
                  demFn = "inst/data/mrbiko.tif")

mapview(fp[[4]],color="darkblue", alpha.regions = 0.1,lwd=0.5)+mapview(fp[[1]],zcol = "altitude",lwd=1,cex=4)+mapview(fp[[3]],color="red",cex=5)

}
\author{
Chris Reudenbach
}
\references{

}

