% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/makeFlightPlan.R
\name{makeFlightPlan}
\alias{makeFlightPlan}
\title{Basic utility to create litchi compatible autonomous flightplans for the 
phantom 3 drone}
\usage{
makeFlightPlan(flightArea = NULL, terrainfollowing = FALSE, demfN = NULL,
  csvFN = "dji_litchi_auto_control.csv", altFilter = 1,
  flightPlanMode = "waypoints", flightAltitude = 50,
  presetFlightTask = "remote", curvesize = -99, rotationdir = 0,
  gimbalmode = 0, gimbalpitchangle = 0, overlap = 0.6, uavViewDir = 90,
  picRate = 3, actiontype = NULL, actionparam = NULL)
}
\arguments{
\item{flightArea}{you may provide either the coordinates by numbers c(lon1,lat1,lon2,lat2,lon3,lat3,launchLat,launchLon),
or an OGR compatible file (preferably geoJSON or KML) with at least 4 coordinates that describe the flight area and the posion of launching.}

\item{terrainfollowing}{\code{boolean}  TRUE performs an altitude correction of the missions flight altitude using DEM data. You will find further explanation under the \link{note}
If no DEM data is provided and \code{terrainfollowing} is TRUE  SRTM data will be downloaded and used}

\item{demfN}{filname of the corresponding DEM data file}

\item{csvFN}{filename of output CSV file(s)}

\item{altFilter}{if \code{flightPlanMode} is equal \code{"terrainTrack"} 
\code{altFilter} is the treshold value of accepted altitude difference bewteen two waypoints in meter.
If this value is not exceeded the waypoint is omitted due to the fact that only 99 waypoints per mission are allowed.}

\item{flightPlanMode}{type of flightplan. Available are: \code{"waypoints"}, 
\code{"track"}  \code{"terrainTrack"}  \code{"manual"}.}

\item{flightAltitude}{set the default flight altitude of the mission. It is 
assumed that the UAV is started at the highest point of the flightarea otherwise you have to defined the position of launching.}

\item{presetFlightTask}{set the camera action at each waypoint.  Options are: \code{"simple_ortho"} takes one picture/waypoint, 
\code{"multi_ortho"} takes 4 picture at a waypoint, two vertically down and two in forward and backward viewing direction and an angele of -60deg,
\code{"simple_pano"} takes a 360 deg panorama picture , and \code{"remote"}}

\item{curvesize}{litchi control parameter for the curve angle. calculated by default (\code{= -99}) from the swath width.}

\item{rotationdir}{litchi control parameter  if the uav basic turn direction is right 0 or left 1}

\item{gimbalmode}{litchi control parameter}

\item{gimbalpitchangle}{litchi control parameter}

\item{overlap}{overlapping of the pictures in percent (1.0 = 100%)}

\item{uavViewDir}{viewing angle of the camera optimal is 90 degree rotated 
against the flight direction. the flightdirection is defined by c(lon1,lat1,lon2,lat2) from the \code{flightArea} option}

\item{picRate}{\code{numeric} picture per second as triggerd by the remote control}

\item{actiontype}{\code{numeric} the actionype of the camera control c(1,1,...)}

\item{actionparam}{\code{numeric} the parameter for the corresponding actiontype c(0,0,...)}
}
\description{
makeFlightPlan creates flight control files for the dji
  phantom 3 UAV. It ONLY works with the  \code{litchi} flight control app. The
  reason using litchi is on the one hand that litchi's better performs on the other hand
  and much more important that lichti provides an offline mission planer tool 
  with csv format based import/export interface. \cr
  So there is no need to use the dji-cloud.\cr
  From convenience reasons some presets and default settings are defined.
}
\note{
To define a flight area you have to provide either 4 Points (or 3 lines). 
  You may take more complex vectors like a multi point polygon,
  but only the first 4 coordinates x1, x2, x3 and x4 (for the launching position) 
  are used in exactly this order. 
  If you take a rectangle the 4th corner coordinate will be the launching point!
  \cr\cr
  The concept is looking like the following sketch.
 \preformatted{ 
  x2------x3           x2-------x1
  | a                 /
  |                  /
  |   x4            / x4    
  |  /             / /
  x1/             x3/
  }
  This coordinates the length of the line and the angle are used to calculate extend and paralells 
  of the flightplan according to the flight altitude, overlap etc. Note the flight direction depends on 
  the order of the points. If the \code{flightPlanMode} is equal \code{tracks}.
  \cr\cr
  The result look like this.
  
 \preformatted{ 
 
  #--#  #-->             #--#  #
  |  |  |               /  /  /
  |  |  |              /  /  /
  |  |  |             /  /  / 
  #  #--#         <--#  #--#
  }
 If \code{flightPlanMode} is equal \code{waypoints} the result is an equal spatial distribution of waypoints:
 \preformatted{ 
 
  #--#  #-->             #--#  #
  |  |  |               /  /  /
  #  #  #              #  #  #
  |  |  |             /  /  / 
  #  #--#         <--#  #--#
  
  }
  
 "terrainTrack" tries to minimy the waypoints by ommiting altitude differences that exceed
  the treshold \code{optFil}:
 \preformatted{  
 
  #--#  #-->             #--#  #
  |  |  |               /  /  /
  #  #  |              /  /  #
  |  |  |             /  /  / 
  #  #--#         <--#  #--#
 
   }
  \code{waypoints} is optimal for autonoumous flights under calm conditions in complex terrain 
  because the camara takes a picture at every waypoint\cr
  \code{terrainTrack}  is optimal for autonoumous flights under calm conditions in less complex terrain 
  to maximize the area with the available number of 99 waypoints per mission. It works only with 
  automatically triggered picture capturing.\cr
  \code{track} is optimal for relatively plain areas and automatically triggered picture capturing
  Note: Automatically picture capturing in a time interval works only within the range of the remote control. 
  because the the uav needs a trigger signal for taking pictures.
  \cr
  \cr
  The \code{terrainfollowing} switch is used to correct the fixed flight altitude into a terrain following flight altitude. 
  NOTE: You have to be aware that the DJI uav is calibrating the altitude at the launch position in the field!
  So we need always a DEM to get an estimation of the lauch position. 
  You must choose a clearly defined and reliable launching position both in the map and the field. If you fail the aircraft 
  probably will hit the terrain...\cr
 How it works. Let us assume a defined flightaltitude of 50 m. 
 According to the launching point altitude the uav will act like the following sketch shows:
  
\preformatted{ 
                     
  ............... x_(uav)_x ........... uav started at 30 m altitude results in 
                                           a "real" flight altitude of 30m + 50m => 80m
  
  
                  ___60m____
                 |          | 
         30m _x__|          | 
        ____|               |___  
    ___|                        |____ 
 
  
                 ___60m____
      ..........|          |............ uav started at 0 m altitude results in 
             ___|          |___          "real" flight altitude of 50m above 0m
        ____|                  |  
    ___|                       |__x__ 0m
  }  
 To avoid negative impacts from the P3 auto calibration, the launch altitude is used to
 correct the flight altitude according to: \cr
 maximumAltitude_of_flightArea + altitude_of_launchposition\cr
 So the adapted flight altitude is always seen as the flight altitude above the highest terrain altitude:
  \preformatted{
                 
 ...................................... real altitude of uav 110 m
         

                 ___60m____ 
                |          |
         30m _x_|          |___
        ____|                  |  
    ___|                       |______ 
  }  
 To get a fixed scale flight the launch altitude is used to correct the flight altitude according to   maximumAltitude of flightArea + altitude of launchposition. With the setting auf terrainfoollowing = true tis is calculated for each waypoint.  . So the adapted flight altitude looks like:
  \preformatted{
                 
                 ..........
                |          |
            ....|          |.... 
       ....|     ___60m____    |    
  ....|         |          |   |....... real altitude of uav 50m
         30m _x_|          |___
        ____|                  |  
    ___|                       |___x___ 0m
  }
}
\examples{
### we need sp and raster ###
library(mapview)
library(raster)
library(sp)
library(geosphere)
library(rgdal)
library(tools)
library(maptools)

## flight 50 meters above ground over a flat topography
fp<-makeFlightPlan(flightArea=c(50.80801,8.72993,50.80590,8.731153,50.80553,8.73472,50.8055,8.734))

# - red circle      the planned launching point of the uav. 
# - blue circles    the waypoint position
# - blue rectangles the corresponding field of view (fov)at the ground
# - raster[[fp2]]   the digitial elevation model (DEM)
# - raster[[fp5]]   a heatmap abundance of pictures/pixel

mapview(fp[[2]])+mapview(fp[[4]],color="darkblue", alpha.regions = 0.1,lwd=0.5)+mapview(fp[[1]],zcol = "altitude",lwd=1,cex=4,color="blue")+mapview(fp[[3]],color="red",cex=5)+mapview(fp[[5]],legend=TRUE,alpha.regions = 1)


## changing area and overlapping by adapting the viewing angle of the camera
fp<-makeFlightPlan(flightArea=c(50.80801,8.72993,50.80590,8.731153,50.80553,8.73472,50.80709,8.734),
                  uavViewDir=30) 
                  
mapview(fp[[2]])+mapview(fp[[4]],color="darkblue", alpha.regions = 0.1,lwd=0.5)+mapview(fp[[1]],zcol = "altitude",lwd=1,cex=4)+mapview(fp[[3]],color="red",cex=5)

## changing area and overlapping by adapting the overlap
fp<-makeFlightPlan(flightArea=c(50.80801,8.72993,50.80590,8.731153,50.80553,8.73472,50.80709,8.734),
                  overlap=0.8) 
                  
mapview(fp[[2]])+mapview(fp[[4]],color="darkblue", alpha.regions = 0.1,lwd=0.5)+mapview(fp[[1]],zcol = "altitude",lwd=1,cex=4)+mapview(fp[[3]],color="red",cex=5)


## make a terrain following flightplan
fp<-makeFlightPlan(flightArea=c(50.80801,8.72993,50.80590,8.731153,50.80553,8.73472,50.80709,8.734), 
                   terrainfollowing=TRUE,
                   demfN="~/mrbiko.tif")
                   
mapview(fp[[2]])+mapview(fp[[4]],color="darkblue", alpha.regions = 0.1,lwd=0.5)+mapview(fp[[1]],zcol = "altitude",lwd=1,cex=4,)+mapview(fp[[3]],color="red",cex=5)

## high resolution (depending on the DEM!) terrainfollowing flight altitude
## camera control has to be controlled manually due to presetFlightTask = "remote"
fp<-makeFlightPlan(flightArea=c(50.80801,8.72993,50.80590,8.731153,50.80553,8.73472,50.8055,8.734), demfN = "~/mrbiko.tif",uavViewDir=0,flightAltitude = 25, terrainfollowing = TRUE, presetFlightTask = "remote")

mapview(fp[[2]])+mapview(fp[[4]],color="darkblue", alpha.regions = 0.1,lwd=0.5)+mapview(fp[[1]],zcol = "altitude",lwd=1,cex=4,)+mapview(fp[[3]],color="red",cex=5)

 
## digitize flight area using leafDraw()
leafDraw(preset="uav")

## assuming resulting file is names "uav.json"
fp<-makeFlightPlan(flightArea = "~/uav.json")

mapview(fp[[2]])+mapview(fp[[4]],color="darkblue", alpha.regions = 0.1,lwd=0.5)+mapview(fp[[1]],zcol = "altitude",lwd=1,cex=4,color="blue")+mapview(fp[[3]],color="red",cex=5)

}
\author{
Chris Reudenbach
}
\references{

}

