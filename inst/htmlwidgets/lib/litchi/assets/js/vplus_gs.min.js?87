function DistOverlay(a, b, c) {
    this.pos_ = a,
    this.text_ = b,
    this.map_ = c,
    this.div_ = null ,
    this.setMap(c)
}
var RotateIcon = function(a) {
    this.options = a || {},
    this.rImg = a.img || new Image,
    this.rImg.src = this.rImg.src || this.options.url || "",
    this.options.width = this.options.width || this.rImg.width || 52,
    this.options.height = this.options.height || this.rImg.height || 60,
    canvas = document.createElement("canvas"),
    canvas.width = this.options.width,
    canvas.height = this.options.height,
    this.context = canvas.getContext("2d"),
    this.canvas = canvas
}
;
RotateIcon.makeIcon = function(a) {
    return new RotateIcon({
        img: a
    })
}
,
RotateIcon.prototype.setRotation = function(a) {
    var b = this.context
      , c = a * Math.PI / 180
      , d = this.options.width / 2
      , e = this.options.height / 2;
    return b.clearRect(0, 0, this.options.width, this.options.height),
    b.save(),
    b.translate(d, e),
    b.rotate(c),
    b.translate(-d, -e),
    b.drawImage(this.rImg, 0, 0),
    b.restore(),
    this
}
,
RotateIcon.prototype.getUrl = function() {
    return this.canvas.toDataURL("image/png")
}
,
"undefined" == typeof Uint8Array.from && (Uint8Array.from = function(a) {
    for (var b = new Uint8Array(a.length), c = 0; c < a.length; ++c)
        b[c] = a[c];
    return b
}
);
var getUrlParameter = function(a) {
    var b, c, d = decodeURIComponent(window.location.search.substring(1)), e = d.split("&");
    for (c = 0; c < e.length; c++)
        if (b = e[c].split("="),
        b[0] === a)
            return void 0 === b[1] ? !0 : b[1]
}
  , g_ctrlkeydown = !1;
window.onkeydown = function(a) {
    a && (g_ctrlkeydown = "Control" == a.key || 1 == a.ctrlKey)
}
,
window.onkeyup = function(a) {
    g_ctrlkeydown = !1
}
;
var g_user, GSWaypoint = function() {
    this.altitude = 30,
    this.turnMode = 0,
    this.heading = 0,
    this.speed = 0,
    this.stayTime = 3,
    this.maxReachTime = 0,
    this.latitude = 0,
    this.longitude = 0,
    this.dampingDistance = .2,
    this.gimbalCtrl = 0,
    this.gimbalPitchAngle = 0,
    this.numActions = 0,
    this.repeatActions = 1,
    this.actions = [],
    this.actionParams = [],
    this.targetPoi = null ,
    this.manualHeadingOverride = !1
}
;
GSWaypoint.prototype = Object.create(GSWaypoint.prototype);
var GSMission = function() {
    this.headingMode = 3,
    this.finishAction = 0,
    this.pathMode = 1,
    this.horizontalSpeed = 8,
    this.rcSpeed = 8,
    this.repeatNum = 0,
    this.autoGimbal = 0,
    this.parseMission = null
}
;
GSMission.prototype = Object.create(GSMission.prototype);
var GSPOI = function() {
    this.latitude = 0,
    this.longitude = 0,
    this.altitude = 1
}
;
GSPOI.prototype = Object.create(GSPOI.prototype);
var GStool = {
    VERSION: 2,
    MISSION_CURR_VERSION: 6,
    ACTIONS: {
        0: "Stay For",
        1: "Take Photo",
        2: "Start Recording",
        3: "Stop Recording",
        4: "Rotate Aircraft",
        5: "Tilt Camera"
    },
    myLoc: null ,
    map: null ,
    cluster: [],
    discoverData: [],
    filters: {
        hv: !0
    },
    overlay: null ,
    ParseMission: null ,
    elevator: null ,
    myMissions: null ,
    isClone: null ,
    markerToWaypoints: null ,
    movingEnabled: !1,
    rotateEnabled: !1,
    scalingEnabled: !1,
    poiMarkers: null ,
    currMission: null ,
    defaultCurveSize: 75,
    maxDamping: 1e3,
    missionLine: null ,
    unit: 0,
    currIdx: null ,
    lastWP: null ,
    currentHash: null ,
    curves: null ,
    formatDistance: function(a, b) {
        return 1 == this.unit ? !b && 3.2808399 * a > 1e3 ? (621371e-9 * a).toFixed(1) + "m." : Math.round(3.2808399 * a) + "ft" : !b && a > 1e3 ? (a / 1e3).toFixed(1) + "km" : Math.round(a) + "m"
    },
    formatDistanceNoUnit: function(a) {
        return Math.round(1 == this.unit ? 3.2808399 * a : a)
    },
    formatSpeed: function(a) {
        return 1 == this.unit ? (2.2369 * a).toFixed(1) + "mph" : (3.6 * a).toFixed(1) + "km/h"
    },
    updateLatLongET: function(a, b) {
        $("#et-lat").val(a),
        $("#et-long").val(b)
    },
    updateCurvSlider: function(a) {
        this.sliderCurv.slider("setValue", a),
        $("#altcurv").val(a + "%")
    },
    updateSpdSlider: function(a) {
        this.sliderSpd.slider("setValue", a),
        $("#altspd").val(this.formatSpeed(a / 10))
    },
    updateHESlider: function(a) {
        this.sliderHe.slider("setValue", a),
        $("#althe").val(a + "Â°")
    },
    getDisplayedHeading: function(a) {
        return 0 > a ? a + 360 : a
    },
    getRealHeading: function(a) {
        return a > 180 ? a - 360 : a
    },
    updateCSSlider: function(a) {
        this.sliderCs.slider("setValue", a),
        $("#altcs").val(this.formatDistance.call(this, a, !0))
    },
    updateAltSlider: function(a) {
        this.sliderAlt.slider("setValue", a),
        $("#altalt").val(this.formatDistance.call(this, a, !0))
    },
    updateSpeedSlider: function(a) {
        this.sliderSpeed.slider("setValue", a),
        $("#altwpspeed").val(0 == a && 1 == this.acType ? "Cruising" : this.formatSpeed.call(this, a))
    },
    updateStaytimeSlider: function(a) {
        this.sliderStay.slider("setValue", a),
        $("#slider-stay-label").text("Stay Time: " + a + "s")
    },
    checkLatitude: function(a) {
        var b = Math.abs(a);
        return b > 1e-6 && 90 >= b
    },
    checkLongitude: function(a) {
        var b = Math.abs(a);
        return b > 1e-6 && 180 >= b
    },
    initialize: function() {
        g_user = Parse.User.current(),
        this.ParseMission = Parse.Object.extend("Mission"),
        this.elevator = new google.maps.ElevationService,
        this.isClone = !1;
        var a = {
            center: {
                lat: 38,
                lng: -56
            },
            zoom: 4,
            keyboardShortcuts: !1,
            scaleControl: !0,
            tilt: 0
        };
        this.map = new google.maps.Map(document.getElementById("map-canvas"),a),
        this.map.setMapTypeId(google.maps.MapTypeId.SATELLITE);
        var b = {
            gridSize: 50,
            maxZoom: 15
        };
        this.cluster = new MarkerClusterer(this.map,[],b),
        google.maps.event.addListener(this.cluster, "clusterclick", function(a, b) {
            b.cancelBubble && b.cancelBubble(),
            b.stopPropagation && b.stopPropagation()
        }),
        this.overlay = new google.maps.OverlayView,
        this.overlay.draw = function() {}
        ,
        this.overlay.setMap(this.map),
        this.markerToWaypoints = [],
        this.poiMarkers = [],
        this.curves = [],
        this.myMissions = {},
        this.currMission = new GSMission;
        var c = this;
        google.maps.event.addListener(this.map, "click", function(a) {
            return c.ignoreNextClick ? void (c.ignoreNextClick = !1) : c.rotateEnabled ? (c.rotateMarker && c.rotateMarker.setMap(null ),
            void (c.rotateMarker = new google.maps.Marker({
                position: a.latLng,
                map: c.map,
                draggable: !0,
                icon: {
                    url: "../assets/img/delete30.png",
                    anchor: new google.maps.Point(16,16)
                }
            }))) : c.movingEnabled ? (c.moveMissionToLocation(a.latLng, 0, -1),
            void c.refreshMissionLine()) : void (c.canAddWP() && (c.addWaypoint.call(c, !1, a.latLng.lat(), a.latLng.lng(), 30, 0 == c.acType ? 2 : 0, 3, 0, 0, 1 == c.acType ? 0 : 360),
            c.refreshMissionLine(),
            c.refreshTotalTimeAndDistance(),
            c.refreshGSHeadings(!1),
            c.updateCurrentSelection(c.markerToWaypoints.length - 1, !1)))
        }),
        google.maps.event.addListener(this.map, "rightclick", function(a) {
            c.addPOI.call(c, a.latLng, 1, !0),
            c.updateCurrentSelection(-c.poiMarkers.length, !1),
            c.refreshHash()
        });
        var d = localStorage ? localStorage.getItem("gsUnit") : 0;
        this.unit = null == d || 1 != d && 0 != d ? 0 : d;
        var e = localStorage ? parseInt(localStorage.getItem("acType")) : 1;
        this.acType = null == e || 1 != e && 0 != e ? 1 : e,
        this.refreshAircraftControls(),
        this.showDiscover = localStorage && !isNaN(parseInt(localStorage.getItem("showdiscover"))) ? parseInt(localStorage.getItem("showdiscover")) : !0,
        this.defaultCurveSize = localStorage && !isNaN(parseFloat(localStorage.getItem("defcurvesize"))) ? parseFloat(localStorage.getItem("defcurvesize")) : 75,
        this.currMission.horizontalSpeed = localStorage && !isNaN(parseFloat(localStorage.getItem("hspeed"))) ? parseFloat(localStorage.getItem("hspeed")) : 8,
        this.currMission.rcSpeed = localStorage && !isNaN(parseFloat(localStorage.getItem("hspeed"))) ? parseFloat(localStorage.getItem("hspeed")) : 8;
        var f = document.createElement("input");
        f.placeholder = "Search...",
        f.type = "text",
        f.id = "pac-input";
        var g = new google.maps.places.SearchBox(f);
        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(f),
        g.addListener("places_changed", function() {
            var a = g.getPlaces();
            if (0 != a.length) {
                var b = new google.maps.LatLngBounds;
                a.forEach(function(a) {
                    a.geometry && a.geometry.viewport ? b.union(a.geometry.viewport) : b.extend(a.geometry.location)
                }),
                c.map.fitBounds(b)
            }
        });
        var h = document.createElement("script");
        h.type = "text/javascript",
        h.src = "//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js",
        document.body.appendChild(h);
        var i = document.createElement("ins");
        i.index = 1,
        i.className = "adsbygoogle",
        i.style.display = "inline-block",
        i.style.width = "320px",
        i.style.height = "100px",
        i.style.marginLeft = "76px",
        i.style.marginBottom = "10px",
        i.dataset.adClient = "ca-pub-4309883147467401",
        i.dataset.adSlot = "4504246378",
        this.map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(i),
        setTimeout(function() {
            (adsbygoogle = window.adsbygoogle || []).push({})
        }, 1e3);
        var j = document.createElement("div");
        j.id = "wpsettings",
        j.style.display = "none";
        var k = $("#wpsettings-content").clone();
        $("#wpsettings-content").remove(),
        j.appendChild(k.get(0)),
        j.index = 1,
        this.map.controls[google.maps.ControlPosition.RIGHT_CENTER].push(j);
        var l = document.createElement("div")
          , m = $('<a class="btn btn-default" style="font-weight:bold;" href="javascript:;" role="button" data-toggle="tooltip" data-placement="right" title="Clear"><i class="fa fa-eraser"></i></a>').get(0);
        m.style.marginBottom = "100px",
        m.style.marginLeft = "20px",
        l.appendChild(m),
        l.index = 2,
        google.maps.event.addDomListener(l, "click", function() {
            c.toggleAllOff(),
            c.isClone = !1,
            c.reset.call(c)
        }),
        this.map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(l);
        var n = document.createElement("div")
          , o = $('<a class="btn btn-default togglebtn" style="font-weight:bold;" id="movebtn" href="javascript:;" role="button" data-toggle="tooltip" data-placement="right" title="Move"><i class="fa fa-arrows"></i></a>').get(0);
        o.style.marginBottom = "20px",
        o.style.marginLeft = "20px",
        n.appendChild(o),
        n.index = 3,
        google.maps.event.addDomListener(n, "click", function() {
            var a = !c.movingEnabled;
            c.toggleAllOff(),
            c.toggleMove(a)
        }),
        this.map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(n),
        n = document.createElement("div"),
        o = $('<a class="btn btn-default togglebtn" style="font-weight:bold;" id="scalebtn" href="javascript:;" role="button" data-toggle="tooltip" data-placement="right" title="Scale"><i class="fa fa-expand"></i></a>').get(0),
        o.style.marginBottom = "20px",
        o.style.marginLeft = "20px",
        n.appendChild(o),
        n.index = 4,
        google.maps.event.addDomListener(n, "click", function() {
            var a = !c.scalingEnabled;
            c.toggleAllOff(),
            c.toggleScale(a)
        }),
        this.map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(n),
        n = document.createElement("div"),
        o = $('<a class="btn btn-default togglebtn" style="font-weight:bold;" id="rotatebtn" href="javascript:;" role="button" data-toggle="tooltip" data-placement="right" title="Rotate"><i class="fa fa-repeat"></i></a>').get(0),
        o.style.marginBottom = "20px",
        o.style.marginLeft = "20px",
        n.appendChild(o),
        n.index = 5,
        google.maps.event.addDomListener(n, "click", function() {
            var a = !c.rotateEnabled;
            c.toggleAllOff(),
            c.toggleRotate(a)
        }),
        this.map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(n),
        n = document.createElement("div"),
        o = $('<a class="btn btn-default" style="font-weight:bold;" id="mylocbtn" href="javascript:;" role="button" data-toggle="tooltip" data-placement="right" title="Home"><i class="fa fa-lg fa-home"></i></a>').get(0),
        o.style.marginTop = "10px",
        o.style.marginLeft = "20px",
        n.appendChild(o),
        n.index = 1,
        google.maps.event.addDomListener(n, "click", function() {
            c.homeAction.call(c)
        }),
        this.map.controls[google.maps.ControlPosition.LEFT_TOP].push(n),
        n = document.createElement("div"),
        o = $('<a class="btn btn-default" style="font-weight:bold;" id="globebtn" href="javascript:;" role="button" data-toggle="tooltip" data-placement="right" title="Discover"><i class="fa fa-lg fa-globe"></i></a>').get(0),
        o.style.marginTop = "10px",
        o.style.marginLeft = "20px",
        n.appendChild(o),
        n.index = 2,
        google.maps.event.addDomListener(n, "click", function() {
            c.globeAction.call(c)
        }),
        this.map.controls[google.maps.ControlPosition.LEFT_TOP].push(n);
        var p = document.createElement("div")
          , q = $('<div class="btn-group dropup"> <button class="btn btn-primary dropdown-toggle mission-dropdown-toggle" type="button" aria-haspopup="true" aria-expanded="false">MISSIONS</button> <ul id="dd-miss-ul" class="dropdown-menu dd-missions"> <li><a id="mn-new" href="javascript:;">New</a></li> <li><a id="mn-open" href="javascript:;">Open...</a></li> <li><a id="mn-save" href="javascript:;">Save...</a></li> <li><a id="mn-import" href="javascript:;">Import...</a></li> <li><a id="mn-export" href="javascript:;">Export to CSV</a></li> </ul></div>').get(0);
        q.style.marginBottom = "40px",
        q.style.marginRight = "20px",
        p.appendChild(q),
        p.index = 1,
        $(document).on("mouseover", ".mission-dropdown-toggle", function() {
            $(".mission-dropdown-toggle").next().css("display", "block")
        }),
        $(document).on("mouseleave", ".mission-dropdown-toggle", function(a) {
            a.relatedTarget && "dd-miss-ul" == a.relatedTarget.id || $(".mission-dropdown-toggle").next().css("display", "none")
        }),
        $(document).on("mouseleave", "#dd-miss-ul", function(a) {
            $(".mission-dropdown-toggle").next().css("display", "none")
        }),
        $(document).on("click", "#mn-open", function() {
            $(".mission-dropdown-toggle").next().css("display", "none"),
            c.showOpen.call(c)
        }),
        $(document).on("click", "#mn-new", function() {
            $(".mission-dropdown-toggle").next().css("display", "none"),
            c.newFile.call(c)
        }),
        $(document).on("click", "#mn-save", function() {
            $(".mission-dropdown-toggle").next().css("display", "none"),
            c.showSave.call(c)
        }),
        $(document).on("click", "#mn-import", function() {
            $(".mission-dropdown-toggle").next().css("display", "none"),
            c.showImport.call(c)
        }),
        $(document).on("click", "#mn-export", function() {
            $(".mission-dropdown-toggle").next().css("display", "none"),
            c.exportCSV.call(c)
        }),
        this.map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(p);
        var r = document.createElement("div");
        r.id = "msettingsctrldiv";
        var s = $('<a class="btn btn-default" style="font-weight:bold;" href="javascript:;" role="button">SETTINGS</a>').get(0);
        s.style.marginBottom = "40px",
        s.style.marginRight = "20px",
        r.appendChild(s),
        r.index = 2,
        google.maps.event.addDomListener(r, "click", function() {
            c.showSettings.call(c)
        }),
        this.map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(r);
        var t = document.createElement("div")
          , o = $('<a class="btn btn-default" style="font-weight:bold;" href="javascript:;" role="button">SHORTCUTS</a>').get(0);
        o.style.marginBottom = "40px",
        o.style.marginRight = "20px",
        t.appendChild(o),
        t.index = 3,
        google.maps.event.addDomListener(t, "click", function() {
            $("#shortcuts").modal("show")
        }),
        this.map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(t),
        $("#sclosebtn").on("click", function() {
            $("#shortcuts").modal("hide")
        }),
        t = document.createElement("div"),
        o = $('<a class="btn btn-default" style="font-weight:bold;" target="_blank" href="https://www.udemy.com/phantom-filmschool-introduction-to-litchi/" role="button">PHANTOM FILMSCHOOL</a>').get(0),
        o.style.marginBottom = "40px",
        o.style.marginRight = "20px",
        t.appendChild(o),
        t.index = 4,
        this.map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(t),
        t = document.createElement("div"),
        o = $('<a class="btn btn-danger" style="font-weight:bold;" href="javascript:;" role="button"><i style="color:yellow" class="fa fa-star"></i>&nbsp;ENTER GIVEAWAY&nbsp;<i style="color:yellow" class="fa fa-star"></i></a>').get(0),
        o.style.display = "none",
        o.style.marginBottom = "40px",
        o.style.marginRight = "20px",
        t.appendChild(o),
        t.index = 5,
        google.maps.event.addDomListener(t, "click", function() {
            $("#contestspinner").hide(),
            $("#contest").find("div.alert").html("").hide(),
            $("#enterconfirm").html(c.currMission && c.currMission.parseMission && c.currMission.parseMission.get("name") ? "Make sure you want to enter the giveaway with the current mission: <b>" + (c.currMission && c.currMission.parseMission ? "[" + c.currMission.parseMission.get("name") + "]" : "[unknown]") + "</b>, then click Enter below." : '<div class="alert alert-danger">Please open the mission you want to enter the giveaway with first:<br><code>Missions->Open->My Missions->Open a mission</code><br><br>If this is a new mission, save it to your account first (you must be logged in):<br><code>Missions->Save</code></div>'),
            $("#contest").modal("show")
        }),
        this.map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(t),
        $("#cclosebtn").on("click", function() {
            $("#contest").modal("hide")
        }),
        $("#realenter").on("click", function() {
            if (g_user)
                $("#contestspinner").show(),
                Parse.Cloud.run("enterContest", {
                    mId: c.currMission && c.currMission.parseMission ? c.currMission.parseMission.id : null
                }, function(a, b) {
                    var c = $("#contest").find("div.finalalert");
                    c.show(),
                    null == b ? (c.removeClass("alert-danger"),
                    c.addClass("alert-success"),
                    c.html(a)) : (c.removeClass("alert-success"),
                    c.addClass("alert-danger"),
                    c.html(b.message)),
                    $("#contestspinner").hide()
                }, function(a) {
                    console.log("err", a),
                    $("#contestspinner").hide()
                });
            else {
                var a = $("#contest").find("div.finalalert");
                a.show(),
                a.removeClass("alert-success"),
                a.addClass("alert-danger"),
                a.html('You must first login to your account:&nbsp;&nbsp;<a href="javascript:;" class="btn btn-primary need-login-btn">Log in</a>')
            }
        });
        var u = document.createElement("div")
          , v = $('<a class="btn btn-default btn-lg litchilogo" style="font-weight:bold;" target="_blank" href="https://flylitchi.com" role="button">&nbsp;</a>').get(0);
        v.style.marginTop = "10px",
        v.style.marginRight = "20px",
        u.appendChild(v),
        u.index = 1,
        this.map.controls[google.maps.ControlPosition.TOP_RIGHT].push(u),
        g_user ? g_user.fetch(function() {
            c.addLoginButton()
        }) : c.addLoginButton();
        var w = document.createElement("div")
          , x = $('<span id="label-distance" class="label"></span>').get(0);
        x.style.marginTop = "10px",
        x.style.fontSize = "22px",
        w.appendChild(x),
        w.index = 1,
        this.map.controls[google.maps.ControlPosition.TOP_CENTER].push(w);
        var y = function() {
            c.sliderAlt = $("#slider-alt").slider({
                formatter: function(a) {
                    return c.formatDistance(a, !0)
                }
            }),
            $("#altalt").val(c.formatDistance.call(c, 30, !0));
            var a = function(a) {
                var b = a.value.newValue;
                $("#altalt").val(c.formatDistance.call(c, b, !0)),
                c.currIdx < 0 ? (c.poiMarkers[Math.abs(c.currIdx) - 1].poi.altitude = b,
                c.poiMarkers[Math.abs(c.currIdx) - 1].marker.setIcon(c.getPOIIcon(Math.abs(c.currIdx), b, !0))) : (c.markerToWaypoints[c.currIdx].wp.altitude = b,
                c.markerToWaypoints[c.currIdx].marker.setIcon(c.getWPIcon(c.currIdx + 1, b, !0)),
                c.lastWP = c.markerToWaypoints[c.currIdx].wp,
                c.refreshTotalTimeAndDistance(),
                c.updateGimbalMode(c.markerToWaypoints[c.currIdx].wp.gimbalCtrl))
            }
            ;
            $("#slider-alt").on("change", a),
            $("#altalt").on("change", function(a) {
                var b = parseInt(a.target.value);
                1 == c.unit && (b /= 3.2808),
                b = Math.min(500, Math.max(-200, b)),
                b && b >= -200 && 500 >= b ? (c.updateAltSlider(b),
                c.currIdx < 0 ? (c.poiMarkers[Math.abs(c.currIdx) - 1].poi.altitude = b,
                c.poiMarkers[Math.abs(c.currIdx) - 1].marker.setIcon(c.getPOIIcon(Math.abs(c.currIdx), b, !0))) : (c.markerToWaypoints[c.currIdx].wp.altitude = b,
                c.markerToWaypoints[c.currIdx].marker.setIcon(c.getWPIcon(c.currIdx + 1, b, !0)),
                c.lastWP = c.markerToWaypoints[c.currIdx].wp,
                c.refreshTotalTimeAndDistance(),
                c.updateGimbalMode(c.markerToWaypoints[c.currIdx].wp.gimbalCtrl)),
                c.refreshHash()) : $("#altalt").val(c.currIdx < 0 ? c.formatDistance.call(c, c.poiMarkers[c.currIdx].poi.altitude, !0) : c.formatDistance.call(c, c.markerToWaypoints[c.currIdx].wp.altitude, !0))
            }),
            c.sliderSpeed = $("#slider-speed").slider({
                formatter: function(a) {
                    return 0 == a && 1 == c.acType ? "Use Cruising Speed" : c.formatSpeed(a)
                }
            }),
            $("#slider-speed").on("change", function(a) {
                var b = a.value.newValue;
                $("#altwpspeed").val(0 == b && 1 == c.acType ? "Cruising" : c.formatSpeed.call(c, b)),
                c.markerToWaypoints[c.currIdx].wp.speed = b,
                c.lastWP = c.markerToWaypoints[c.currIdx].wp,
                c.refreshTotalTimeAndDistance()
            }),
            $("#altwpspeed").on("change", function(a) {
                var b = parseFloat(a.target.value);
                isNaN(b) && (b = 0),
                b /= 1 == c.unit ? 2.2369 : 3.6,
                b = Math.min(15, Math.max(0, b)),
                c.updateSpeedSlider(b),
                c.markerToWaypoints[c.currIdx].wp.speed = b,
                c.lastWP = c.markerToWaypoints[c.currIdx].wp
            }),
            c.sliderCs = $("#slider-cs").slider({
                formatter: function(a) {
                    return c.formatDistance(a, !0)
                }
            }),
            $("#altcs").val(c.formatDistance.call(c, .2, !0)),
            $("#slider-cs").on("change", function(a) {
                var b = a.value.newValue
                  , d = Math.min(c.maxDamping, Math.max(.2, b));
                $("#altcs").val(c.formatDistance.call(c, d, !0)),
                c.markerToWaypoints[c.currIdx].wp.dampingDistance = d,
                c.isCurveUseful() && c.refreshOneCurve(c.currIdx, !0),
                c.refreshHash()
            }),
            $("#altcs").on("change", function(a) {
                var b = parseInt(a.target.value);
                1 == c.unit && (b /= 3.2808),
                b = Math.min(c.maxDamping, Math.max(.2, b)),
                b && b >= .2 && b < c.maxDamping ? (c.updateCSSlider(b),
                c.markerToWaypoints[c.currIdx].wp.dampingDistance = b,
                c.isCurveUseful() && c.refreshOneCurve(c.currIdx, !0),
                c.refreshHash()) : $("#altcs").val(c.formatDistance.call(c, c.markerToWaypoints[c.currIdx].wp.dampingDistance, !0))
            }),
            c.sliderHe = $("#slider-he").slider({
                formatter: function(a) {
                    return a + "Â°"
                }
            }),
            $("#althe").val("0Â°"),
            $("#slider-he").on("change", function(a) {
                var b = a.value.newValue;
                $("#althe").val(b + "Â°");
                var d = c.markerToWaypoints[c.currIdx];
                d.wp.heading != c.getRealHeading(Math.round(b)) && (d.wp.targetPoi = null ),
                d.wp.manualHeadingOverride = !0,
                d.wp.heading = c.getRealHeading(b),
                c.updateOneGSHeadingRotation(c.currIdx),
                c.refreshHash(),
                c.lastWP = d.wp
            }),
            $("#althe").on("change", function(a) {
                var b = parseInt(a.target.value);
                if (b && b >= 0 && 360 >= b) {
                    c.updateHESlider(b);
                    var d = c.markerToWaypoints[c.currIdx];
                    d.wp.heading != c.getRealHeading(Math.round(b)) && (d.wp.targetPoi = null ),
                    d.wp.manualHeadingOverride = !0,
                    d.wp.heading = c.getRealHeading(b),
                    c.updateOneGSHeadingRotation(c.currIdx),
                    c.refreshHash(),
                    c.lastWP = d.wp
                } else
                    $("#althe").val(c.getDisplayedHeading(c.markerToWaypoints[c.currIdx].wp.heading) + "Â°")
            }),
            $("#et-lat").on("change", function(a) {
                var b = parseFloat(a.target.value)
                  , d = c.currIdx < 0 ? c.poiMarkers[Math.abs(c.currIdx) - 1] : c.markerToWaypoints[c.currIdx]
                  , e = c.currIdx < 0 ? d.poi : d.wp;
                b && c.checkLatitude(b) ? (e.latitude = b,
                c.updateLatLongET(e.latitude, e.longitude),
                c.repositionMarker(c.currIdx)) : $("#et-lat").val(e.latitude)
            }),
            $("#et-long").on("change", function(a) {
                var b = parseFloat(a.target.value)
                  , d = c.currIdx < 0 ? c.poiMarkers[Math.abs(c.currIdx) - 1] : c.markerToWaypoints[c.currIdx]
                  , e = c.currIdx < 0 ? d.poi : d.wp;
                b && c.checkLongitude(b) ? (e.longitude = b,
                c.updateLatLongET(e.latitude, e.longitude),
                c.repositionMarker(c.currIdx)) : $("#et-long").val(e.longitude)
            }),
            $("#show-discover").get(0).checked = c.showDiscover,
            $("#show-discover").on("change", function() {
                c.showDiscover = $(this).is(":checked") ? 1 : 0,
                localStorage && localStorage.setItem("showdiscover", c.showDiscover),
                c.refreshDiscoverMarkers(0)
            }),
            $("input[name=acradio][id=option" + c.acType + "]").click(),
            $("input[name=acradio]").on("change", function(a) {
                c.switchAircraft()
            }),
            $("input[name=unitradio][id=option" + c.unit + "]").click(),
            $("input[name=unitradio]").on("change", function(a) {
                c.switchUnit()
            }),
            $("input[name=pathradio][id=option" + c.currMission.pathMode + "]").click(),
            $("input[name=pathradio]").on("change", function(a) {
                c.currMission.pathMode = parseInt($("input[name=pathradio]:checked").val()),
                null !== c.currIdx && c.currIdx >= 0 && c.updateCurrentSelection(c.currIdx, !1),
                c.refreshMissionLine(!1)
            }),
            $("input[name=gpitchctrlradio]").on("change", function(a) {
                c.updateGimbalMode(a.target.value),
                c.refreshHash()
            }),
            $("#altgpitch").on("change", function(a) {
                var b = parseInt(a.target.value);
                b >= -90 && 30 >= b ? (c.updateGimbalPitchAngle(b),
                c.refreshHash()) : c.updateGimbalPitchAngle(c.markerToWaypoints[c.currIdx].wp.gimbalPitchAngle)
            }),
            c.sliderStay = $("#slider-stay").slider({
                formatter: function(a) {
                    return a + "s"
                }
            }),
            $("#slider-stay-label").text("Stay Time: 3s"),
            $("#slider-stay").on("change", function(a) {
                var b = a.value.newValue;
                $("#slider-stay-label").text("Stay Time: " + b + "s"),
                c.markerToWaypoints[c.currIdx].wp.stayTime = b,
                c.lastWP = c.markerToWaypoints[c.currIdx].wp,
                c.refreshHash()
            }),
            $("#checkbox-banked").on("click", function() {
                c.markerToWaypoints[c.currIdx].wp.turnMode = $(this).is(":checked") ? 1 : 0,
                c.lastWP = c.markerToWaypoints[c.currIdx].wp,
                c.refreshHash()
            }),
            c.sliderSpd = $("#slider-spd").slider({
                formatter: function(a) {
                    return c.formatSpeed(a / 10)
                }
            }),
            $("#slider-spd").on("change", function(a) {
                var b = a.value.newValue;
                $("#altspd").val(c.formatSpeed(b / 10)),
                c.currMission.horizontalSpeed = b / 10,
                c.currMission.rcSpeed = Math.max(2, Math.min(c.currMission.horizontalSpeed, 15)),
                localStorage && localStorage.setItem("hspeed", c.currMission.horizontalSpeed),
                c.refreshTotalTimeAndDistance(),
                c.refreshHash()
            }),
            $("#altspd").on("change", function(a) {
                var b = parseFloat(a.target.value);
                b /= 1 == c.unit ? 2.2369 : 3.6,
                b && b >= 0 && 15 >= b ? (c.updateSpdSlider(10 * b),
                c.currMission.horizontalSpeed = b,
                c.currMission.rcSpeed = Math.max(2, Math.min(c.currMission.horizontalSpeed, 15)),
                localStorage && localStorage.setItem("hspeed", c.currMission.horizontalSpeed),
                c.refreshTotalTimeAndDistance(),
                c.refreshHash()) : $("#altspd").val(c.formatSpeed(c.currMission.horizontalSpeed))
            }),
            c.updateSpdSlider(10 * c.currMission.horizontalSpeed),
            c.sliderCurv = $("#slider-curv").slider({
                formatter: function(a) {
                    return a + "%"
                }
            }),
            $("#slider-curv").on("change", function(a) {
                var b = a.value.newValue;
                $("#altcurv").val(b + "%"),
                c.defaultCurveSize = b,
                localStorage && localStorage.setItem("defcurvesize", c.defaultCurveSize),
                c.refreshHash()
            }),
            $("#altcurv").on("change", function(a) {
                var b = parseInt(a.target.value);
                b && b >= 0 && 100 >= b ? (c.updateCurvSlider(b),
                localStorage && localStorage.setItem("defcurvesize", c.defaultCurveSize),
                c.refreshHash()) : $("#altcurv").val(c.defaultCurveSize + "%")
            }),
            c.updateCurvSlider(c.defaultCurveSize),
            $("#action-add").on("click", function() {
                c.markerToWaypoints[c.currIdx].wp.numActions < 15 && (c.addAction(c.markerToWaypoints[c.currIdx].wp.numActions, 0, 0),
                c.markerToWaypoints[c.currIdx].wp.actions.push(0),
                c.markerToWaypoints[c.currIdx].wp.actionParams.push(0),
                ++c.markerToWaypoints[c.currIdx].wp.numActions,
                c.refreshNumActions(),
                c.refreshHash(),
                $("#actionlist").scrollTop($("#actionlist")[0].scrollHeight))
            }),
            $("#filter-hasvideo").on("change", function() {
                c.filters.hv = $(this).is(":checked") ? 1 : 0,
                c.refreshDiscoverMarkers(0)
            }),
            $("#downloadbtn").on("click", function() {
                c.onSave.call(c)
            }),
            $("#importbtn").on("click", function() {
                c["import"].call(c)
            }),
            $("#openbtn").on("click", function() {
                c.open.call(c)
            }),
            $("#mission-refresh-btn").on("click", function() {
                c.refreshCurrent.call(c)
            }),
            $("#mclosebtn").on("click", function() {
                $("#msettings").modal("hide")
            }),
            $("#facebookbtn").on("click", function() {
                c.shareFB.call(c, location.href)
            }),
            $("#delwp").on("click", function() {
                c.deleteObj.call(c)
            }),
            $("#inswp").on("click", function() {
                c.insertWP.call(c)
            }),
            $("#prevwp").on("click", function() {
                c.prevWP.call(c)
            }),
            $("#nextwp").on("click", function() {
                c.nextWP.call(c)
            }),
            $("#closewp").on("click", function() {
                c.hideWPSettings()
            }),
            $(document).on("click", "#pano-preset", function() {
                c.panoPreset.call(c, $(this))
            }),
            $(document).on("click", ".need-login-btn", function() {
                $("#contest").modal("hide"),
                $("#openmodal").modal("hide"),
                $("#downloadalert").modal("hide"),
                $("#login-error-div").hide(),
                $("#login-error").html(""),
                $("#login-modal").modal("show")
            }),
            $(document).on("click", "#loginbtn", function() {
                $("#login-error-div").hide(),
                $("#login-error").html(""),
                $("#login-modal").modal("show")
            }),
            $(document).on("click", "#logoutbtn", function() {
                Parse.User.logOut(),
                g_user = null ,
                c.myMissions = {},
                setTimeout(function() {
                    $("#loginblock").html(c.getLoginButtonHTML())
                }, 250)
            }),
            $("#login-form").on("submit", function() {
                return c.doLogin(),
                !1
            }),
            $("#fblogin").on("click", function() {
                c.doFBLogin()
            }),
            $("#register-go").on("click", function() {
                $("#login-modal").modal("hide"),
                $("#register-error-div").hide(),
                $("#register-error").html(""),
                $("#register-modal").modal("show")
            }),
            $("#register-form").on("submit", function() {
                return c.doRegister(),
                !1
            }),
            $("#forgot-go").on("click", function() {
                $("#login-modal").modal("hide"),
                $("#forgot-error-div").hide(),
                $("#forgot-error").html(""),
                $("#forgot-modal").modal("show")
            }),
            $("#forgot-form").on("submit", function() {
                return c.doForgot(),
                !1
            }),
            $(document).on("click", "a.share-mission", function() {
                c.shareFB.call(c, "https://flylitchi.com/hub?m=" + $(this).data("id"))
            }),
            $(document).on("change", "input.private-mission", function() {
                c.setMissionPublicReadable($(this).is(":checked"), $(this).data("id"))
            }),
            $(document).popover({
                selector: "a.video-mission",
                html: !0,
                title: function() {
                    return $(this).parent().find(".head").html()
                },
                content: function() {
                    return $(this).parent().find(".content").html()
                }
            }),
            $(document).on("click", ".video-url-form > button", function() {
                c.saveVideoUrl($(this).data("id"), $(this).parent().find('input[type="text"]').val()),
                $("a.video-mission[data-id=" + $(this).data("id") + "]").popover("hide")
            }),
            $(document).on("click", "a.delete-mission", function() {
                c.deleteMission($(this).data("id"))
            }),
            $(document).on("click", "a.open-mission", function() {
                $("#openmodal").modal("hide"),
                c.openFromCloud($(this).data("id"))
            }),
            $(document).on("click", "a.download-mission", function() {
                c.downloadFromCloud($(this).data("id"))
            }),
            $('a[data-toggle="tab"]').on("show.bs.tab", function(a) {
                if ("mymissions-a" == a.target.id)
                    c.refreshMyMissions();
                else if ("pubmissions-a" == a.target.id) {
                    var b = $("#pubmissions-rows").html();
                    (void 0 == b || "" == b) && c.pubMissionHTML && navigator.userAgent.toLowerCase().indexOf("firefox") > -1 && $("#pubmissions-rows").html(c.pubMissionHTML)
                }
            }),
            $('[data-toggle="tooltip"]').tooltip(),
            $(document).on("keyup", function(a) {
                switch (a.keyCode) {
                case 13:
                    $("#downloadalert").is(":visible") && c.onSave.call(c);
                    break;
                case 46:
                    c.deleteObj.call(c);
                    break;
                case 37:
                    "input" !== a.target.tagName.toLowerCase() && c.prevWP.call(c);
                    break;
                case 39:
                    "input" !== a.target.tagName.toLowerCase() && c.nextWP.call(c);
                    break;
                case 27:
                    c.hideWPSettings();
                    break;
                case 45:
                    c.insertWP.call(c)
                }
            }),
            c.refreshTotalTimeAndDistance.call(c),
            !c.readQuery(),
            c.refreshDiscoverMarkers(0)
        }
        ;
        window.onblur = function() {
            window.blurred = !0
        }
        ,
        window.onfocus = function() {
            window.blurred = !1
        }
        ,
        function() {
            var a, b = 250, c = 50;
            a = window.setInterval(function() {
                window.blurred || (b -= c,
                0 >= b && (window.clearInterval(a),
                y()))
            }, c)
        }(),
        c.headingIcon = new Image,
        c.headingIcon.onload = function() {}
        ,
        c.headingIcon.src = "../assets/img/heading_blue.png",
        c.wpMarkerIcon = new Image,
        c.wpMarkerIcon.onload = function() {}
        ,
        c.wpMarkerIcon.src = "../assets/img/waypoint_marker.png",
        c.wpGreenMarkerIcon = new Image,
        c.wpGreenMarkerIcon.onload = function() {}
        ,
        c.wpGreenMarkerIcon.src = "../assets/img/waypoint_green_marker.png",
        c.poiMarkerIcon = new Image,
        c.poiMarkerIcon.onload = function() {}
        ,
        c.poiMarkerIcon.src = "../assets/img/poi_marker.png",
        c.poiGreenMarkerIcon = new Image,
        c.poiGreenMarkerIcon.onload = function() {}
        ,
        c.poiGreenMarkerIcon.src = "../assets/img/poi_green_marker.png",
        navigator.geolocation && navigator.geolocation.getCurrentPosition(function(a) {
            c.myLoc = new google.maps.LatLng(a.coords.latitude,a.coords.longitude),
            !c.loadingFromCloud && location && (!location.hash || location.hash.length <= 1) && (c.map.setCenter(c.myLoc),
            c.map.setZoom(16))
        }, function() {})
    },
    addLoginButton: function() {
        var a = document.createElement("div")
          , b = $('<span style="display:block" id="loginblock">' + this.getLoginButtonHTML() + "</span>").get(0);
        b.style.marginTop = "16px",
        b.style.marginRight = "20px",
        a.appendChild(b),
        a.index = 2,
        this.map.controls[google.maps.ControlPosition.TOP_RIGHT].push(a)
    },
    doFBLogin: function() {
        var a = this;
        Parse.FacebookUtils.logIn("email", {
            success: function(b) {
                b.existed() ? (g_user = b,
                $("#login-modal").modal("hide"),
                $("#loginblock").html(a.getLoginButtonHTML())) : FB.api("/me?fields=name,first_name,last_name,email", function(c) {
                    b = Parse.User.current(),
                    b.set("name", c.name),
                    b.set("email", c.email),
                    b.set("first_name", c.first_name),
                    b.set("last_name", c.last_name),
                    b.set("fromFB", !0),
                    b.save(null , {
                        success: function(b) {
                            g_user = b,
                            $("#login-modal").modal("hide"),
                            $("#loginblock").html(a.getLoginButtonHTML())
                        },
                        error: function(b, c) {
                            $("#login-modal").modal("hide"),
                            $("#loginblock").html(a.getLoginButtonHTML())
                        }
                    })
                })
            },
            error: function(a, b) {}
        })
    },
    doLogin: function() {
        var a = $("#inputEmail3").val()
          , b = $("#inputPassword3").val()
          , c = this;
        Parse.User.logIn(a, b, {
            success: function(a) {
                g_user = a,
                $("#login-modal").modal("hide"),
                $("#loginblock").html(c.getLoginButtonHTML())
            },
            error: function(a, b) {
                $("#login-error-div").show(),
                $("#login-error").html(b.message.replace("username", "email"))
            }
        })
    },
    doForgot: function() {
        var a = $("#inputEmail10").val();
        Parse.User.requestPasswordReset(a, {
            success: function() {
                $("#forgot-modal").modal("hide")
            },
            error: function(a) {
                $("#forgot-error-div").show(),
                $("#forgot-error").html(a.message.replace("username", "email"))
            }
        })
    },
    doRegister: function() {
        var a = $("#inputName1").val()
          , b = $("#inputEmail4").val()
          , c = $("#inputPassword5").val()
          , d = $("#inputPassword6").val();
        if (c != d)
            return $("#register-error-div").show(),
            void $("#register-error").html("Passwords are not the same");
        var e = new Parse.User;
        e.set("username", b),
        e.set("password", c),
        e.set("email", b),
        e.set("name", a);
        var f = this;
        e.signUp(null , {
            success: function(a) {
                g_user = a,
                $("#register-modal").modal("hide"),
                $("#loginblock").html(f.getLoginButtonHTML()),
                fbq("track", "CompleteRegistration")
            },
            error: function(a, b) {
                $("#register-error-div").show(),
                $("#register-error").html(b.message.replace("username", "email"))
            }
        })
    },
    getLoginButtonHTML: function() {
        var a = '<a id="loginbtn" class="btn btn-default" href="javascript:;" role="button" data-toggle="tooltip" data-placement="bottom" title="Log in"><i class="fa fa-lg fa-sign-in"></i></a>';
        return g_user && (a = $(".userbtn").clone(),
        a.get(0).className = "btn-group",
        a.find(".logoutbtn").get(0).id = "logoutbtn",
        a.find(".logoutbtn").get(0).className = "",
        a = $("<div />").append(a).html(),
        a = a.replace("___", g_user.get("name"))),
        a
    },
    deleteQueryParam: function() {
        History.replaceState(null , document.title, location.href.split("?")[0])
    },
    readQuery: function() {
        var a = getUrlParameter("m");
        return a ? (this.openFromCloud(a, !0),
        !0) : (this.deleteQueryParam(),
        !1)
    },
    downloadFromCloud: function(a) {
        var b = new Parse.Query("Mission")
          , c = this;
        b.get(a, {
            success: function(a) {
                Parse.Cloud.run("getMission", {
                    url: a.get("file").url()
                }, function(b) {
                    var d = b.buffer;
                    c.triggerDownload(Uint8Array.from(d).buffer, a.get("name"))
                }, function(a) {})
            },
            error: function(a, b) {}
        })
    },
    writeURLParam: function(a) {
        var b = location.href.split("?")[0];
        b = b.split("#")[0],
        History.replaceState(null , document.title, b + "?m=" + a)
    },
    openFromCloud: function(a, b) {
        this.loadingFromCloud = !0;
        var c = new Parse.Query("Mission")
          , d = this;
        c.get(a, {
            success: function(a) {
                var c = a.get("user");
                c && g_user && c.id == g_user.id ? (d.currMission.parseMission = a,
                d.writeURLParam(a.id)) : (d.currMission.parseMission = null ,
                d.isClone = !0,
                b || d.deleteQueryParam()),
                d.loadFromCloud(a)
            },
            error: function(a, b) {
                d.deleteQueryParam()
            }
        })
    },
    readHash: function() {
        var a = location.hash;
        "#" == a.substr(0, 1) && (a = a.substr(1),
        a.length > 0 && this.restoreWaypointsFromHash(a))
    },
    getWPIcon: function(a, b, c) {
        var d = document.createElement("canvas")
          , e = this.wpMarkerIcon.width
          , f = this.wpMarkerIcon.height;
        d.width = e,
        d.height = f;
        var g = d.getContext("2d");
        g.drawImage(c ? this.wpGreenMarkerIcon : this.wpMarkerIcon, 0, 0, e, f),
        g.font = "bold 12px Arial",
        g.fillStyle = "white";
        var h = g.measureText(a).width;
        g.fillText(a, e / 2 - h / 2, .65 * f),
        g.font = "bold 9px Arial";
        var i = this.formatDistanceNoUnit(b);
        return h = g.measureText(i).width,
        g.fillText(i, e / 2 - h / 2, .25 * f),
        d.toDataURL("image/png")
    },
    getPOIIcon: function(a, b, c) {
        var d = document.createElement("canvas")
          , e = this.poiMarkerIcon.width
          , f = this.poiMarkerIcon.height;
        d.width = e,
        d.height = f;
        var g = d.getContext("2d");
        g.drawImage(c ? this.poiGreenMarkerIcon : this.poiMarkerIcon, 0, 0, e, f),
        g.font = "bold 12px Arial",
        g.fillStyle = "white";
        var h = g.measureText(a).width;
        g.fillText(a, e / 2 - h / 2, .82 * f),
        g.font = "bold 9px Arial";
        var i = this.formatDistanceNoUnit(b);
        return h = g.measureText(i).width,
        g.fillText(i, e / 2 - h / 2, .2 * f),
        d.toDataURL("image/png")
    },
    restoreWaypointsFromHash: function(a) {
        var b = LZString.decompressFromBase64(a)
          , c = this.getBufferFromString(b);
        this.loadMissionFromArrayBuffer(c.buffer)
    },
    loadMissionFromArrayBuffer: function(a) {
        this.reset();
        var b = new DataView(a,0)
          , c = 0
          , d = b.getInt32(0)
          , e = 1818454121 == d
          , f = 1818454122 == d || 1818454123 == d || 1818454124 == d || 1818454125 == d || 1818454126 == d
          , g = 1818454123 == d || 1818454124 == d || 1818454125 == d || 1818454126 == d
          , h = 1818454124 == d || 1818454125 == d || 1818454126 == d
          , i = 1818454125 == d || 1818454126 == d
          , j = 1818454126 == d;
        if (e || f) {
            var k = 4
              , l = 0
              , m = 0;
            if (g) {
                m += 28,
                h && (m += 4),
                i && (m += 4),
                this.currMission.headingMode = b.getInt32(k),
                k += 4,
                this.currMission.finishAction = b.getInt32(k),
                k += 4,
                this.currMission.pathMode = b.getInt32(k),
                $("input[name=pathradio][id=option" + this.currMission.pathMode + "]").click(),
                k += 4,
                this.currMission.horizontalSpeed = b.getFloat32(k),
                k += 4,
                this.updateSpdSlider(10 * this.currMission.horizontalSpeed),
                this.currMission.rcSpeed = b.getFloat32(k),
                k += 4,
                this.currMission.repeatNum = b.getInt32(k),
                k += 4,
                l = b.getInt16(k),
                k += 2;
                {
                    b.getInt16(k)
                }
                k += 2
            }
            k = 4 + m;
            var n = 44;
            f && (n += 4);
            var o = -1;
            if (g && (n += 8,
            o = b.getInt32(k),
            k += 4),
            !g || o > 0)
                for (; ; ) {
                    if (k + n > a.byteLength)
                        break;
                    var p = new GSWaypoint;
                    p.altitude = b.getFloat32(k),
                    p.turnMode = b.getInt32(k + 4),
                    p.heading = b.getFloat32(k + 8),
                    p.speed = b.getFloat32(k + 12) * (0 == this.acType || j || l >= 6 ? 1 : 0),
                    p.stayTime = b.getInt16(k + 16),
                    p.maxReachTime = b.getInt16(k + 18),
                    p.latitude = b.getFloat64(k + 20),
                    p.longitude = b.getFloat64(k + 28);
                    var q = 36;
                    f && (p.dampingDistance = b.getFloat32(k + q),
                    q += 4),
                    g && (p.gimbalCtrl = b.getInt32(k + q),
                    q += 4,
                    p.gimbalPitchAngle = b.getInt32(k + q),
                    q += 4),
                    p.numActions = b.getInt32(k + q),
                    q += 4,
                    p.repeatActions = b.getInt32(k + q),
                    q += 4;
                    var r = 0;
                    if (p.numActions > 0) {
                        r += 8 * p.numActions;
                        for (var s = 0; s < p.numActions; ++s)
                            p.actions.push(b.getInt32(k + q)),
                            q += 4,
                            p.actionParams.push(b.getInt32(k + q)),
                            q += 4
                    }
                    if (this.addWaypoint(!0, p.latitude, p.longitude, p.altitude, p.speed, p.stayTime, p.turnMode, p.maxReachTime, p.heading, p),
                    ++c,
                    k += r + n,
                    g && c == o)
                        break
                }
            if (g) {
                var t = b.getInt32(k);
                k += 4;
                for (var s = 0; t > s; ++s) {
                    var u = new GSPOI;
                    u.latitude = b.getFloat64(k),
                    k += 8,
                    u.longitude = b.getFloat64(k),
                    k += 8,
                    u.altitude = b.getFloat32(k),
                    k += 4,
                    this.addPOI(new google.maps.LatLng(u.latitude,u.longitude), u.altitude, !1)
                }
            }
        } else
            for (; ; ) {
                if (36 * (c + 1) > a.byteLength)
                    break;
                var v = 36 * c
                  , p = new GSWaypoint;
                p.altitude = b.getFloat32(v),
                p.turnMode = b.getInt32(v + 4),
                p.heading = b.getFloat32(v + 8),
                p.speed = b.getFloat32(v + 12),
                p.stayTime = b.getInt16(v + 16),
                p.maxReachTime = b.getInt16(v + 18),
                p.latitude = b.getFloat64(v + 20),
                p.longitude = b.getFloat64(v + 28),
                this.addWaypoint(!0, p.latitude, p.longitude, p.altitude, p.speed, p.stayTime, p.turnMode, p.maxReachTime, p.heading, p),
                ++c
            }
        this.refreshMissionLine(),
        this.refreshTotalTimeAndDistance(),
        this.refreshGSHeadings(!1),
        this.zoomToAllWPs(),
        this.refreshHash();
        for (var c in this.markerToWaypoints) {
            var w = this.markerToWaypoints[c];
            null == w.wp.targetPoi && 0 != w.wp.heading && (w.wp.manualHeadingOverride = !0)
        }
    },
    refreshCurrent: function() {
        var a = $(".nav-tabs .active").find("a").get(0).id;
        "pubmissions-a" == a ? this.refreshDiscoverMarkers(0) : "mymissions-a" == a && (this.myMissions = {},
        this.refreshMyMissions())
    },
    exportCSV: function() {
        if (!(this.markerToWaypoints.length <= 0)) {
            var a = this.currMission && this.currMission.parseMission ? this.currMission.parseMission.get("name") : "litchi_mission";
            a += ".csv";
            for (var b = "latitude,longitude,altitude(" + (1 == this.unit ? "ft" : "m") + "),heading(deg),curvesize(" + (1 == this.unit ? "ft" : "m") + "),rotationdir,gimbalmode,gimbalpitchangle", c = 0; 15 > c; ++c)
                b += ",actiontype" + (c + 1) + ",actionparam" + (c + 1);
            b += "\n";
            for (var c = 0; c < this.markerToWaypoints.length; ++c) {
                var d = this.markerToWaypoints[c].wp;
                b += d.latitude + "," + d.longitude + "," + (1 == this.unit ? 3.2808399 * d.altitude : d.altitude) + "," + this.getDisplayedHeading(d.heading) + "," + (1 == this.unit ? 3.2808399 * d.dampingDistance : d.dampingDistance) + "," + d.turnMode + "," + d.gimbalCtrl + "," + d.gimbalPitchAngle;
                for (var e = 0; 15 > e; ++e)
                    b += e < d.actions.length ? "," + d.actions[e] + "," + d.actionParams[e] : ",-1,0";
                b += "\n"
            }
            this.saveCSVtoFile(b, a)
        }
    },
    "import": function() {
        var a = this
          , b = $("#fileimport").get(0).files[0];
        if (b)
            if (/\.kml$/i.test(b.name)) {
                var c = new FileReader;
                c.onload = function(b) {
                    var c = (new DOMParser).parseFromString(b.target.result, "text/xml")
                      , d = toGeoJSON.kml(c)
                      , e = c.getElementsByTagName("altitudeMode")
                      , f = !e || e.length < 1 ? !1 : "relativeToGround" == e[0].textContent;
                    if (d.features && d.features.length > 0) {
                        $("#importmodal").modal("hide"),
                        a.newFile();
                        for (var g = 0; g < d.features.length; ++g) {
                            var h = d.features[g];
                            if (h.geometry && h.geometry.type && -1 != ["LinearRing", "LineString", "Point"].indexOf(h.geometry.type) && h.geometry.coordinates && !(h.geometry.coordinates.length < 2)) {
                                var i = h.geometry.coordinates;
                                if ("Point" == h.geometry.type && (i = [h.geometry.coordinates]),
                                a.markerToWaypoints.length < 99)
                                    for (var j in i)
                                        if (a.markerToWaypoints.length < 99) {
                                            var k = i[j]
                                              , l = new GSWaypoint;
                                            l.altitude = k.length > 2 && 0 != parseFloat(k[2]) ? Math.max(-200, Math.min(500, parseFloat(k[2]))) : 30,
                                            l.latitude = parseFloat(k[1]),
                                            l.longitude = parseFloat(k[0]),
                                            a.addWaypoint(!0, l.latitude, l.longitude, l.altitude, l.speed, l.stayTime, l.turnMode, l.maxReachTime, l.heading, l)
                                        }
                            }
                        }
                        f && a.setAltitudesRelativeToGround(),
                        a.refreshMissionLine(),
                        a.refreshTotalTimeAndDistance(),
                        a.refreshGSHeadings(!1),
                        a.zoomToAllWPs()
                    } else
                        $("#import-error-div").show(),
                        $("#import-error").html("Error: failed parsing kml file")
                }
                ,
                c.readAsText(b)
            } else
                Papa.parse(b, {
                    complete: function(b) {
                        var c = null
                          , d = b.data;
                        (!d || d.length <= 0 || d[0].length < 2) && (c = "invalid data");
                        var e = !1;
                        if (c || "latitude" != d[0][0] && "lat" != d[0] || (d[0].length >= 3 && (e = -1 != d[0][2].indexOf("ft")),
                        d.shift()),
                        c || "" != d[d.length - 1][0] || d.splice(-1, 1),
                        !c && d.length > 99 && (c = "too many waypoints"),
                        !c)
                            for (var f = 0; f < d.length; ++f) {
                                f = parseInt(f);
                                var g = Math.abs(parseFloat(d[f][0]))
                                  , h = Math.abs(parseFloat(d[f][1]));
                                if (0 > g || g > 90 || 0 > h || h > 180) {
                                    c = "invalid coordinates for waypoint " + (f + 1);
                                    break
                                }
                                var i = d[f].length > 2 ? parseFloat(d[f][2]) : 30;
                                if (e && (i /= 3.2808399),
                                -200 > i || i > 500) {
                                    c = "invalid altitude for waypoint " + (f + 1) + " (valid range is " + (e ? "[-655,1640]ft" : "[-200,500]m") + ")";
                                    break
                                }
                                var j = d[f].length > 3 ? parseFloat(d[f][3]) : 0;
                                if (-180 > j || j > 360) {
                                    c = "invalid heading for waypoint " + (f + 1) + " (valid range is [-180,360]Â°)";
                                    break
                                }
                                var k = d[f].length > 4 ? parseFloat(d[f][4]) : .2;
                                if (e && (k /= 3.2808399),
                                0 > k || k > 1e3) {
                                    c = "invalid curve size for waypoint " + (f + 1) + " (valid range is " + (e ? "[0,3280]ft" : "[0,1000]m") + ")";
                                    break
                                }
                                var l = d[f].length > 5 ? parseInt(d[f][5]) : 0;
                                if (0 != l && 1 != l) {
                                    c = "invalid rotation direction for waypoint " + (f + 1) + " (0 for clockwise, 1 for counterclockwise)";
                                    break
                                }
                                var m = d[f].length > 6 ? parseInt(d[f][6]) : 0;
                                if (0 != m && 1 != m && 2 != m) {
                                    c = "invalid gimbal mode for waypoint " + (f + 1) + " (0 for disabled, 1 for focus poi, 2 for interpolate)";
                                    break
                                }
                                var n = d[f].length > 7 ? parseInt(d[f][7]) : 0;
                                if (-90 > n || n > 30) {
                                    c = "invalid gimbal pitch angle for waypoint " + (f + 1) + " (valid range is [-90,30]Â°)";
                                    break
                                }
                                for (var o = 8, p = 0; 15 > p && !(d[f].length < o + 2); ++p) {
                                    var q = parseInt(d[f][o])
                                      , r = parseInt(d[f][o + 1]);
                                    if (-1 == [-1, 0, 1, 2, 3, 4, 5].indexOf(q)) {
                                        c = "invalid action type " + (p + 1) + " for waypoint " + (f + 1) + " (valid range is [-1,5])";
                                        break
                                    }
                                    switch (q) {
                                    case 0:
                                        (0 > r || r > 65535) && (c = "invalid stay time action param " + (p + 1) + " for waypoint " + (f + 1) + " (valid range is [0,65535]ms)");
                                        break;
                                    case 1:
                                        break;
                                    case 2:
                                        break;
                                    case 3:
                                        break;
                                    case 4:
                                        (-180 > r || r > 360) && (c = "invalid aircraft rotation action param " + (p + 1) + " for waypoint " + (f + 1) + " (valid range is [-180,360]Â°)");
                                        break;
                                    case 5:
                                        (-90 > r || r > 0) && (c = "invalid tilt camera param " + (p + 1) + " for waypoint " + (f + 1) + " (valid range is [-90,0]Â°)")
                                    }
                                    if (null != c)
                                        break;
                                    o += 2
                                }
                                if (null != c)
                                    break
                            }
                        if (null != c)
                            $("#import-error-div").show(),
                            $("#import-error").html("Error: " + c);
                        else {
                            $("#importmodal").modal("hide"),
                            a.newFile();
                            for (var f = 0; f < d.length; ++f) {
                                var s = new GSWaypoint
                                  , t = d[f].length > 2 ? parseFloat(d[f][2]) : 30;
                                e && (t /= 3.2808399),
                                s.altitude = t,
                                s.latitude = parseFloat(d[f][0]),
                                s.longitude = parseFloat(d[f][1]);
                                var j = d[f].length > 3 ? parseFloat(d[f][3]) : 0;
                                s.heading = a.getRealHeading(j);
                                var k = d[f].length > 4 ? parseFloat(d[f][4]) : .2;
                                e && (k /= 3.2808399),
                                s.dampingDistance = Math.max(.2, Math.min(1e3, k)),
                                s.rdir = d[f].length > 5 ? parseInt(d[f][5]) : 0,
                                s.gimbalCtrl = d[f].length > 6 ? parseInt(d[f][6]) : 0,
                                s.gimbalPitchAngle = d[f].length > 7 ? parseInt(d[f][7]) : 0;
                                for (var o = 8, p = 0; 15 > p && !(d[f].length < o + 2); ++p) {
                                    var q = parseInt(d[f][o]);
                                    if (-1 == q)
                                        break;
                                    s.actions.push(q),
                                    s.actionParams.push(parseInt(d[f][o + 1])),
                                    o += 2
                                }
                                s.numActions = (o - 8) / 2,
                                a.addWaypoint(!0, s.latitude, s.longitude, s.altitude, s.speed, s.stayTime, s.turnMode, s.maxReachTime, s.heading, s)
                            }
                            a.refreshMissionLine(),
                            a.refreshTotalTimeAndDistance(),
                            a.refreshGSHeadings(!1),
                            a.zoomToAllWPs()
                        }
                    },
                    error: function(a) {
                        $("#import-error-div").show(),
                        $("#import-error").html("Error: " + (a ? a.message : "unknown error"))
                    }
                });
        else
            $("#import-error-div").show(),
            $("#import-error").html("Error: no file")
    },
    open: function() {
        var a = $("#fileopen").get(0).files[0];
        if (a) {
            var b = new FileReader
              , c = this;
            c.newFile(),
            b.onload = function(a) {
                c.loadMissionFromArrayBuffer(a.target.result)
            }
            ,
            b.readAsArrayBuffer(a)
        }
        $("#openmodal").modal("hide")
    },
    zoomToAllWPs: function() {
        if (this.markerToWaypoints.length >= 2) {
            var a = new google.maps.LatLngBounds;
            for (var b in this.markerToWaypoints)
                a.extend(this.markerToWaypoints[b].marker.position);
            this.map.fitBounds(a)
        } else
            this.markerToWaypoints.length >= 1 && (this.map.setCenter(this.markerToWaypoints[0].marker.position),
            this.map.setZoom(14))
    },
    refreshNumActions: function() {
        $("#actionnum").text("Actions: " + this.markerToWaypoints[this.currIdx].wp.numActions + (1 == this.currMission.pathMode ? " (disabled with Curved Turns)" : ""))
    },
    refreshHash: function() {},
    refreshAircraftControls: function() {
        1 == this.acType ? ($("#field-actions").show(),
        $("#field-defcurv").show(),
        $("#field-spd").show(),
        $("#field-pathmode").show(),
        $("#field-poi").show(),
        $("#field-cs").show(),
        $("#field-gctrl").show(),
        $("#field-he").show(),
        $("#field-speed").show(),
        $("#field-staytime").hide(),
        $("#field-bankedturn").hide()) : ($("#field-actions").hide(),
        $("#field-defcurv").hide(),
        $("#field-spd").hide(),
        $("#field-pathmode").hide(),
        $("#field-poi").hide(),
        $("#field-cs").hide(),
        $("#field-gctrl").hide(),
        $("#field-he").hide(),
        $("#field-speed").show(),
        $("#field-staytime").show(),
        $("#field-bankedturn").show())
    },
    switchAircraft: function() {
        this.acType = 1 == this.acType ? 0 : 1,
        localStorage && localStorage.setItem("acType", this.acType),
        this.refreshAircraftControls()
    },
    switchUnit: function() {
        this.unit = 1 == this.unit ? 0 : 1,
        localStorage && localStorage.setItem("gsUnit", this.unit),
        this.refreshTotalTimeAndDistance(),
        this.refreshPOIIndices(),
        this.refreshWaypointIndices(),
        this.refreshMissionLine(),
        this.updateSpdSlider(10 * this.currMission.horizontalSpeed),
        null !== this.currIdx && this.updateCurrentSelection(this.currIdx, !1)
    },
    homeAction: function() {
        this.myLoc && (this.map.setCenter(this.myLoc),
        this.map.setZoom(17))
    },
    globeAction: function() {
        this.map.setCenter(new google.maps.LatLng(20,0)),
        this.map.setZoom(3)
    },
    setCursors: function(a, b) {
        b && this.map.setOptions({
            draggableCursor: a
        });
        for (var c in this.markerToWaypoints)
            this.markerToWaypoints[c].marker.setCursor(a);
        for (var c in this.poiMarkers)
            this.poiMarkers[c].marker.setCursor(a)
    },
    toggleScale: function(a) {
        this.scalingEnabled = a,
        this.scalingEnabled ? ($("#scalebtn").addClass("active"),
        this.setCursors("ew-resize", !1)) : ($("#scalebtn").removeClass("active"),
        this.setCursors(void 0, !0))
    },
    toggleRotate: function(a) {
        this.rotateEnabled = a,
        this.rotateEnabled ? ($("#rotatebtn").addClass("active"),
        this.setCursors("url('../assets/img/rotate_cw.png'), default", !1)) : ($("#rotatebtn").removeClass("active"),
        this.setCursors(void 0, !0),
        this.rotateMarker && (this.rotateMarker.setMap(null ),
        this.rotateMarker = null ))
    },
    toggleMove: function(a) {
        this.movingEnabled = a,
        this.movingEnabled ? ($("#movebtn").addClass("active"),
        this.setCursors("move", !0)) : ($("#movebtn").removeClass("active"),
        this.setCursors(void 0, !0))
    },
    toggleAllOff: function() {
        this.movingEnabled && this.toggleMove(!1),
        this.rotateEnabled && this.toggleRotate(!1),
        this.scalingEnabled && this.toggleScale(!1)
    },
    reset: function() {
        for (var a = 0; a < this.markerToWaypoints.length; ++a)
            this.markerToWaypoints[a].marker.setMap(null ),
            this.markerToWaypoints[a].overlay && this.markerToWaypoints[a].overlay.setMap(null );
        this.markerToWaypoints = [];
        for (var a in this.poiMarkers)
            this.poiMarkers[a].marker.setMap(null );
        this.poiMarkers = [];
        for (var a in this.curves)
            this.curves[a].setMap(null );
        this.curves = [],
        this.refreshMissionLine(),
        this.refreshTotalTimeAndDistance(),
        this.hideWPSettings(),
        location.hash = ""
    },
    showShare: function() {
        $("#sharemodal").modal("show"),
        $("#missionlink").val(location.href)
    },
    showSettings: function() {
        $("#msettings").modal("show")
    },
    newFile: function() {
        this.currMission.parseMission = null ,
        this.isClone = !1,
        this.deleteQueryParam(),
        this.reset(),
        this.refreshTotalTimeAndDistance()
    },
    showSave: function() {
        this.markerToWaypoints.length > 1 && (g_user ? ($("#save-notloggedin").hide(),
        $("#filename").val(this.currMission.parseMission ? this.currMission.parseMission.get("name") : "")) : $("#save-notloggedin").show(),
        $("#save-error-div").hide(),
        $("#downloadalert").modal("show"))
    },
    panoPreset: function(a) {
        var b = this.markerToWaypoints[this.currIdx];
        if (!(b.wp.actions && b.wp.actions.length > 1)) {
            for (var c = -180; 180 > c; c += 52)
                this.addAction(this.markerToWaypoints[this.currIdx].wp.numActions, 4, c),
                this.markerToWaypoints[this.currIdx].wp.actions.push(4),
                this.markerToWaypoints[this.currIdx].wp.actionParams.push(c),
                ++this.markerToWaypoints[this.currIdx].wp.numActions,
                this.addAction(this.markerToWaypoints[this.currIdx].wp.numActions, 1, 0),
                this.markerToWaypoints[this.currIdx].wp.actions.push(1),
                this.markerToWaypoints[this.currIdx].wp.actionParams.push(0),
                ++this.markerToWaypoints[this.currIdx].wp.numActions;
            this.refreshNumActions()
        }
    },
    refreshDiscoverMarkers: function(a) {
        0 == a && (this.discoverData = [],
        this.cluster.clearMarkers());
        var b = this;
        $(".filters").find("input").attr("disabled", "disabled"),
        $("#mission-loader-icon").show(),
        $("#mission-refresh-btn").hide(),
        Parse.Cloud.run("listMissionsV3", {
            s: 1e3 * a,
            f: b.filters
        }, function(c) {
            b.handleDiscoverReceived(c, a)
        }, function(a) {});
        var c = new Parse.Query("Mission");
        c.count({
            success: function(a) {
                $("#pubmissions-a").html('Discover&nbsp;<span class="badge">' + a + "</span>")
            },
            error: function(a) {}
        })
    },
    handleDiscoverReceived: function(a, b) {
        var c = this;
        if (a && a.length > 0) {
            for (var d = 0; d < a.length; d++) {
                var e = a[d];
                if (c.discoverData.push(e),
                c.showDiscover) {
                    var f = e.name;
                    f = f.replace(/<(?:.|\n)*?>/gm, ""),
                    f.length > 45 && (f = f.substr(0, 45) + "...");
                    var g = e.videourl && void 0 != typeof e.videourl
                      , h = new google.maps.Marker({
                        position: new google.maps.LatLng(e.latitude - 7e-5,e.longitude),
                        draggable: !1,
                        icon: "../assets/img/" + (g ? "video" : "mission") + "_marker.png"
                    });
                    g && h.setZIndex(999),
                    h.tooltipContent = '<span class="mission-name">' + f + "</span>",
                    h.tooltipContent += e.from && void 0 !== typeof e.from ? "<br>By " + e.from : "",
                    g && (h.tooltipContent += '<br><i style="vertical-align: middle" class="fa fa-2x fa-youtube-play"></i> Double-click to watch'),
                    google.maps.event.addListener(h, "click", function(a) {
                        return function() {
                            c.openFromCloud(a)
                        }
                    }(e.id)),
                    g && google.maps.event.addListener(h, "dblclick", function(a) {
                        return function() {
                            var b = a.replace("https://www.youtube.com/watch?v=", "")
                              , c = "https://www.youtube.com/embed/" + b + "?html5=1"
                              , d = !1;
                            -1 != a.indexOf("vimeo.com") && (d = !0,
                            b = a.replace("https://www.vimeo.com/", ""),
                            c = "//player.vimeo.com/video/" + b),
                            $("#videoModal").find("iframe").attr("src", c + (d ? "?" : "&") + "autoplay=1"),
                            $("#videoModal").off("hidden.bs.modal").on("hidden.bs.modal", function(a) {
                                $("#videoModal").find("iframe").attr("src", c)
                            }),
                            $("#videoModal").modal("show")
                        }
                    }(e.videourl)),
                    google.maps.event.addListener(h, "mouseover", function(a) {
                        return function() {
                            var b = c.overlay.getProjection().fromLatLngToContainerPixel(a.position)
                              , d = $("#mission-tooltip");
                            d.html(a.tooltipContent).css({
                                left: b.x,
                                top: b.y
                            }).show()
                        }
                    }(h)),
                    google.maps.event.addListener(h, "mouseout", function() {
                        $("#mission-tooltip").hide()
                    }),
                    c.cluster.addMarker(h)
                }
            }
            c.refreshDiscover(),
            c.refreshDiscoverMarkers(b + 1)
        } else
            c.refreshDiscover(),
            $(".filters").find("input").removeAttr("disabled"),
            $("#mission-loader-icon").hide(),
            $("#mission-refresh-btn").show()
    },
    refreshDiscover: function() {
        if ($("#pubmissions-rows").html(""),
        this.discoverData.length > 0) {
            for (var a in this.discoverData) {
                var b = new google.maps.LatLng(this.discoverData[a].latitude,this.discoverData[a].longitude);
                this.discoverData[a].dist = this.myLoc ? google.maps.geometry.spherical.computeDistanceBetween(b, this.myLoc) : 0
            }
            this.filters.hv || (this.discoverData = this.discoverData.sort(function(a, b) {
                return parseFloat(a.dist) - parseFloat(b.dist)
            }));
            for (var c = "", a = 0; a < this.discoverData.length; a++) {
                var d = this.discoverData[a]
                  , e = d.name;
                e = e.replace(/<(?:.|\n)*?>/gm, ""),
                e.length > 25 && (e = e.substr(0, 25) + "...");
                var f = d.from;
                f || (f = "unknown"),
                f.length > 15 && (f = f.substr(0, 15) + "..."),
                c += "<tr>",
                c += '<td style="vertical-align: middle">' + e + "</td>",
                c += '<td style="vertical-align: middle" class="text-center">' + (d.dist ? this.formatDistance(d.dist) : "?") + "</td>",
                c += '<td style="vertical-align: middle" class="text-center">' + f + "</td>",
                c += '<td class="text-center td-btn"><a class="open-mission btn btn-default" data-id="' + d.id + '" href="javascript:;"><i class="fa fa-folder-open-o"></i></a></td>',
                c += '<td class="text-center td-btn"><a class="download-mission btn btn-default" data-id="' + d.id + '" href="javascript:;"><i class="fa fa-cloud-download"></i></a></td>',
                c += '<td class="text-center td-btn">' + (d.videourl ? '<a class="btn btn-default" data-id="' + d.id + '" target="_blank" href="' + d.videourl + '"><i class="fa fa-youtube-play"></i></a>' : "") + "</td>",
                c += '<td class="text-center td-btn"><a class="btn btn-default" target="_blank" href="/hub?m=' + d.id + '"><i class="fa fa-link"></i></a></td>',
                c += '<td class="text-center td-btn"><a class="share-mission btn btn-default" data-id="' + d.id + '" href="javascript:;"><i class="fa fa-share-alt"></i></a></td>',
                c += "</tr>"
            }
            !$("#openmodal").hasClass("in") && navigator.userAgent.toLowerCase().indexOf("firefox") > -1 ? this.pubMissionHTML = c : $("#pubmissions-rows").html(c)
        }
    },
    refreshMyMissions: function() {
        if (!g_user)
            return void $("#mymissions-rows").html('<tr><td colspan="5"><div class="alert alert-info" role="alert"><button type="button" class="need-login-btn btn btn-sm btn-primary">Log in</button>&nbsp;&nbsp;&nbsp;to see your missions</div></td></tr>');
        if ($.isEmptyObject(this.myMissions)) {
            $("#mymissions-rows").html(""),
            $("#mission-loader-icon").show(),
            $("#mission-refresh-btn").hide();
            var a = this
              , b = new Parse.Query("Mission");
            b.equalTo("user", g_user),
            b.ascending("name"),
            b.limit(1e3),
            b.find({
                success: function(b) {
                    for (var c = "", d = 0; d < b.length; d++) {
                        var e = b[d]
                          , f = e.get("name");
                        f.length > 35 && (f = f.substr(0, 35) + "...");
                        var g = !e.getACL() || e.getACL().getPublicReadAccess() ? "" : 'checked="checked"';
                        c += "<tr>",
                        c += '<td style="vertical-align: middle">' + f + "</td>",
                        c += '<td style="vertical-align: middle" class="text-center td-btn"><input class="private-mission" data-id="' + e.id + '" type="checkbox" ' + g + " /></td>",
                        c += '<td class="text-center td-btn"><a class="open-mission btn btn-default" data-id="' + e.id + '" href="javascript:;"><i class="fa fa-folder-open-o"></i></a></td>',
                        c += '<td class="text-center td-btn"><a class="download-mission btn btn-default" data-id="' + e.id + '" href="javascript:;"><i class="fa fa-cloud-download"></i></a></td>',
                        c += '<td class="text-center td-btn"><a class="video-mission btn btn-default" data-id="' + e.id + '" href="javascript:;"><i class="fa fa-youtube-play"></i></a>' + a.getYoutubeHTML(e.id, e.get("videourl")) + "</td>",
                        c += '<td class="text-center td-btn"><a class="btn btn-default" target="_blank" href="/hub?m=' + e.id + '"><i class="fa fa-link"></i></a></td>',
                        c += '<td class="text-center td-btn"><a class="share-mission btn btn-default" data-id="' + e.id + '" href="javascript:;"><i class="fa fa-share-alt"></i></a></td>',
                        c += '<td class="text-center td-btn"><a class="delete-mission btn btn-default" data-id="' + e.id + '" href="javascript:;"><i class="fa fa-trash-o"></i></a></td>',
                        c += "</tr>",
                        a.myMissions[e.id] = e
                    }
                    $("#mymissions-rows").html(c),
                    $("#mission-loader-icon").hide(),
                    $("#mission-refresh-btn").show()
                },
                error: function(a) {
                    $("#mission-loader-icon").hide(),
                    $("#mission-refresh-btn").show()
                }
            })
        }
    },
    getYoutubeHTML: function(a, b) {
        var c = '<div class="head hide">Video (Youtube/Vimeo)</div><div class="content hide"><span class="video-url-form"><div class="form-group"><input type="text" class="form-control" placeholder="Paste video URLâ¦" value="' + (b && void 0 != typeof b ? b : "") + '"></div><button type="button" data-id="' + a + '" class="btn btn-default btn-block">Update</button></span></div>';
        return c
    },
    showImport: function() {
        $("#import-error-div").hide(),
        $("#importmodal").modal("show")
    },
    showOpen: function() {
        "pubmissions-a" == $(".nav-tabs .active").find("a").get(0).id || this.refreshMyMissions(),
        $("#openmodal").modal("show")
    },
    detectIE: function() {
        var a = window.navigator.userAgent
          , b = a.indexOf("MSIE ");
        if (b > 0)
            return parseInt(a.substring(b + 5, a.indexOf(".", b)), 10);
        var c = a.indexOf("Trident/");
        if (c > 0) {
            var d = a.indexOf("rv:");
            return parseInt(a.substring(d + 3, a.indexOf(".", d)), 10)
        }
        var e = a.indexOf("Edge/");
        return e > 0 ? parseInt(a.substring(e + 5, a.indexOf(".", e)), 10) : !1
    },
    saveVideoUrl: function(a, b) {
        b = $.trim(b);
        var c = this.myMissions[a];
        if (c) {
            var d = this;
            c.set("videourl", b),
            c.save(null , {
                success: function(a) {
                    c = a,
                    d.myMissions = {},
                    d.refreshMyMissions(),
                    d.syncMyDevices()
                },
                error: function() {
                    c.unset("videourl")
                }
            })
        }
    },
    setMissionPublicReadable: function(a, b) {
        var c = this.myMissions[b];
        if (c) {
            var d = this
              , e = c.getACL();
            e.setPublicReadAccess(!a),
            c.save(null , {
                success: function(b) {
                    b.fetch(),
                    d.syncMyDevices(),
                    a || c.has("location") && c.get("location") || Parse.Cloud.run("getMission", {
                        url: c.get("file").url()
                    }, function(a) {
                        var b = a.buffer;
                        b = Uint8Array.from(b).buffer;
                        var d = new DataView(b,0)
                          , e = d.getFloat64(64)
                          , f = d.getFloat64(72)
                          , g = new Parse.GeoPoint({
                            latitude: e,
                            longitude: f
                        });
                        c.set("location", g),
                        c.save(null , {
                            success: function(a) {},
                            error: function() {}
                        })
                    }, function(a) {})
                },
                error: function() {}
            })
        }
    },
    deleteMission: function(a) {
        var b = this.myMissions[a]
          , c = this;
        b && b.destroy({
            success: function(a) {
                c.myMissions = {},
                c.refreshMyMissions(),
                c.syncMyDevices()
            },
            error: function(a, b) {}
        })
    },
    shareFB: function(a) {
        FB.ui({
            method: "share",
            href: a
        }, function(a) {})
    },
    prevWP: function() {
        null == this.currIdx && (this.currIdx = 1);
        var a = this.currIdx - 1;
        a >= 0 && a > this.markerToWaypoints.length - 1 || 0 > a && Math.abs(a) > this.poiMarkers.length || this.updateCurrentSelection(a, !0)
    },
    nextWP: function() {
        null == this.currIdx && (this.currIdx = -1);
        var a = this.currIdx + 1;
        a >= 0 && a > this.markerToWaypoints.length - 1 || 0 > a && Math.abs(a) > this.poiMarkers.length || this.updateCurrentSelection(a, !0)
    },
    canAddWP: function() {
        return 1 == this.acType ? this.markerToWaypoints.length < 99 : this.markerToWaypoints.length < 15
    },
    interpolateFixed: function(a, b, c) {
        var d = L(a.Ja)
          , e = L(a.Ka)
          , f = L(b.Ja)
          , g = L(b.Ka)
          , h = n.cos(d)
          , i = n.cos(f)
          , b = zx.se(a, b)
          , j = n.sin(b);
        return a = n.sin((1 - c) * b) / j,
        c = n.sin(c * b) / j,
        b = a * h * n.cos(e) + c * i * n.cos(g),
        e = a * h * n.sin(e) + c * i * n.sin(g),
        new Q(Fd(n[zb](a * n.sin(d) + c * n.sin(f), n[Db](b * b + e * e))),Fd(n[zb](e, b)))
    },
    getMidPoint: function(a, b, c, d) {
        var e = this.toRadians(d - b);
        a = this.toRadians(a),
        c = this.toRadians(c),
        b = this.toRadians(b);
        var f = Math.cos(c) * Math.cos(e)
          , g = Math.cos(c) * Math.sin(e)
          , h = Math.atan2(Math.sin(a) + Math.sin(c), Math.sqrt((Math.cos(a) + f) * (Math.cos(a) + f) + g * g))
          , i = b + Math.atan2(g, Math.cos(a) + f);
        return new google.maps.LatLng(this.toDegrees(h),this.toDegrees(i))
    },
    toDegrees: function(a) {
        return a * (180 / Math.PI)
    },
    toRadians: function(a) {
        return a * (Math.PI / 180)
    },
    insertWP: function() {
        var a = this.currIdx;
        if (a < this.markerToWaypoints.length - 1 && this.canAddWP()) {
            var b = this.markerToWaypoints[a].marker
              , c = this.markerToWaypoints[a + 1].marker
              , d = this.getMidPoint(b.position.lat(), b.position.lng(), c.position.lat(), c.position.lng())
              , e = this.markerToWaypoints[a].wp
              , f = this.markerToWaypoints[a + 1].wp
              , g = (e.altitude + f.altitude) / 2
              , h = this.lastWP;
            this.lastWP = null ,
            this.addWaypoint.call(this, !1, d.lat(), d.lng(), g, 0 == this.acType ? 2 : 0, 3, 0, 0, 1 == this.acType ? 0 : 360, null , a + 1),
            this.lastWP = h,
            this.refreshWaypointIndices(),
            this.refreshMissionLine(),
            this.refreshGSHeadings(!1),
            this.updateCurrentSelection(a + 1, !0)
        }
    },
    refreshGSHeadings: function(a, b) {
        return this._refreshGSHeadings(a, null , !1, b)
    },
    _refreshGSHeadings: function(a, b, c, d) {
        if (1 == this.acType) {
            a ? this.computeHeadingsForLatestGSPOI() : b ? this.computeHeadingsForGSPOI(b) : c && this.assignPOITargets();
            for (var e in this.markerToWaypoints) {
                var f = this.markerToWaypoints[e].overlay;
                if (f)
                    d || f.setIcon(this.getHeadingIcon(f.rotateIcon, this.markerToWaypoints[e].wp.heading)),
                    f.setPosition(this.markerToWaypoints[e].marker.position);
                else {
                    var g = RotateIcon.makeIcon(this.headingIcon);
                    f = new google.maps.Marker({
                        position: this.markerToWaypoints[e].marker.position,
                        map: this.map,
                        draggable: !1,
                        icon: this.getHeadingIcon(g, this.markerToWaypoints[e].wp.heading),
                        flat: !0,
                        clickable: !1
                    }),
                    f.rotateIcon = g
                }
                this.markerToWaypoints[e].overlay = f
            }
        }
    },
    getHeadingIcon: function(a, b) {
        return {
            url: a.setRotation(b).getUrl(),
            anchor: new google.maps.Point(17,18)
        }
    },
    updateOneGSHeadingRotation: function(a) {
        var b = this.markerToWaypoints[a]
          , c = b.overlay;
        c && c.setIcon(this.getHeadingIcon(c.rotateIcon, b.wp.heading))
    },
    refreshOneGSHeading: function(a) {
        var b = this.markerToWaypoints[a];
        b && b.wp.targetPoi && (b.wp.heading = this.computeOneWPHeadingFromGSPOI(b, b.wp.targetPoi));
        var c = b.overlay;
        c && (c.setPosition(b.marker.position),
        c.setIcon(this.getHeadingIcon(c.rotateIcon, b.wp.heading)))
    },
    computeHeadingsForLatestGSPOI: function() {
        if (0 != this.poiMarkers.length)
            for (var a in this.markerToWaypoints) {
                var b = this.markerToWaypoints[a];
                if (null == b.wp.targetPoi && !b.wp.manualHeadingOverride) {
                    var c = this.poiMarkers[this.poiMarkers.length - 1];
                    c && (b.wp.heading = Math.round(google.maps.geometry.spherical.computeHeading(b.marker.position, c.marker.position)),
                    b.wp.targetPoi = c)
                }
            }
    },
    computeHeadingsForGSPOI: function(a) {
        if (0 != this.poiMarkers.length)
            for (var b in this.markerToWaypoints) {
                var c = this.markerToWaypoints[b];
                a && c.wp.targetPoi && c.wp.targetPoi == a && (c.wp.heading = Math.round(google.maps.geometry.spherical.computeHeading(c.marker.position, a.marker.position)))
            }
    },
    assignPOITargets: function() {
        if (0 != this.poiMarkers.length)
            for (var a in this.markerToWaypoints) {
                var b = this.markerToWaypoints[a];
                for (var c in this.poiMarkers) {
                    var d = this.poiMarkers[c]
                      , e = google.maps.geometry.spherical.computeHeading(b.marker.position, d.marker.position);
                    if (Math.abs(e - b.wp.heading) <= 1.5) {
                        b.wp.targetPoi = d;
                        break
                    }
                }
            }
    },
    nullifyPOITargets: function(a) {
        for (var b in this.markerToWaypoints) {
            var c = this.markerToWaypoints[b];
            if (c.wp.targetPoi && a && c.wp.targetPoi == a) {
                c.wp.targetPoi = null ;
                var d = this.getClosestPOI(c.marker.position);
                c.wp.heading = this.computeOneWPHeadingFromGSPOI(c, d)
            }
        }
    },
    getClosestPOI: function(a) {
        var b = -1
          , c = null ;
        for (var d in this.poiMarkers) {
            var e = google.maps.geometry.spherical.computeDistanceBetween(a, this.poiMarkers[d].marker.position);
            (-1 == b || b > e) && (b = e,
            c = this.poiMarkers[d])
        }
        return c
    },
    refreshPOIIndices: function() {
        for (var a = 0; a < this.poiMarkers.length; ++a)
            this.poiMarkers[a].marker.setIcon(this.getPOIIcon(a + 1, this.poiMarkers[a].poi.altitude, !1))
    },
    refreshWaypointIndices: function() {
        for (var a = 0; a < this.markerToWaypoints.length; ++a)
            this.markerToWaypoints[a].marker.setIcon(this.getWPIcon(a + 1, this.markerToWaypoints[a].wp.altitude, !1))
    },
    deleteObj: function() {
        if (!(this.currIdx >= 0 && this.currIdx > this.markerToWaypoints.length - 1 || this.currIdx < 0 && Math.abs(this.currIdx) > this.poiMarkers.length)) {
            var a = 0;
            if (this.currIdx < 0) {
                this.poiMarkers[Math.abs(this.currIdx) - 1].marker.setMap(null );
                var b = this.poiMarkers.splice(Math.abs(this.currIdx) - 1, 1);
                this.nullifyPOITargets(b[0]),
                this.refreshPOIIndices(),
                this.refreshGSHeadings(!1),
                a = Math.abs(this.currIdx) - 1 == this.poiMarkers.length ? this.currIdx + 1 : this.currIdx
            } else
                this.markerToWaypoints[this.currIdx].marker.setMap(null ),
                this.markerToWaypoints[this.currIdx].overlay && this.markerToWaypoints[this.currIdx].overlay.setMap(null ),
                this.markerToWaypoints.splice(this.currIdx, 1),
                this.refreshWaypointIndices(),
                this.refreshMissionLine(),
                this.refreshTotalTimeAndDistance(),
                this.refreshGSHeadings(!1),
                a = this.currIdx == this.markerToWaypoints.length ? this.currIdx - 1 : this.currIdx;
            this.updateCurrentSelection(a, !1),
            this.refreshHash()
        }
    },
    addAction: function(a, b, c) {
        var d = $(".actionselect.real").clone()
          , e = d.get(0);
        d.removeClass("real"),
        e.dataset.actionIndex = a,
        e.style.display = "";
        var f = d.find("select");
        for (var g in this.ACTIONS) {
            var h = document.createElement("option");
            h.value = parseInt(g),
            h.value == b && (h.selected = !0),
            $(h).text(this.ACTIONS[g]),
            f.append(h)
        }
        f.on("change", this.onActionChange.bind(this, d));
        var i = d.find("input[type=text]")
          , j = c;
        switch (b) {
        case 0:
            j = c / 1e3,
            i.val(j + "s"),
            i.removeAttr("disabled");
            break;
        case 4:
            0 > j && (j += 360);
        case 5:
            i.val(j + "Â°"),
            i.removeAttr("disabled");
            break;
        default:
            i.attr("disabled", "disabled")
        }
        i.on("change", this.onActionParamChange.bind(this, d));
        var k = d.find("button");
        k.on("click", this.onActionDelete.bind(this, d)),
        $("#actionlist").append(d)
    },
    onActionDelete: function(a) {
        var b = a.get(0).dataset.actionIndex;
        this.markerToWaypoints[this.currIdx].wp.actions.splice(b, 1),
        this.markerToWaypoints[this.currIdx].wp.actionParams.splice(b, 1),
        --this.markerToWaypoints[this.currIdx].wp.numActions,
        this.refreshTotalTimeAndDistance(),
        this.refreshNumActions();
        var c = $("#actionlist").find(".actionselect");
        $(c[b]).remove();
        var d = 0;
        $("#actionlist div").each(function(a, b) {
            b.dataset.actionIndex = d,
            ++d
        })
    },
    onActionChange: function(a) {
        var b = a.get(0).dataset.actionIndex
          , c = $(a).find("select")
          , d = $(a).find("input[type=text]")
          , e = parseInt(c.val());
        switch (this.markerToWaypoints[this.currIdx].wp.actions[b] = e,
        this.refreshHash(),
        e) {
        case 0:
        case 4:
        case 5:
            d.removeAttr("disabled");
            break;
        default:
            d.attr("disabled", "disabled")
        }
        this.onActionParamChange(a)
    },
    onActionParamChange: function(a) {
        var b = a.get(0).dataset.actionIndex
          , c = $(a).find("select")
          , d = $(a).find("input[type=text]")
          , e = parseInt(c.val())
          , f = isNaN(parseFloat(d.val())) ? 0 : parseFloat(d.val());
        switch (e) {
        case 0:
            d.val(f + "s"),
            f *= 1e3;
            break;
        case 4:
        case 5:
            5 == e && (f = Math.min(0, Math.max(-90, f))),
            d.val(f + "Â°");
            break;
        default:
            d.val("")
        }
        this.markerToWaypoints[this.currIdx].wp.actionParams[b] = f,
        this.refreshHash(),
        0 == e && this.refreshTotalTimeAndDistance()
    },
    onSave: function() {
        var a = $("#filename").val();
        if (a = $.trim(a),
        "" == a || a.length > 50 || -1 != a.indexOf("/") || -1 != a.indexOf("\\"))
            return $("#save-error-div").show(),
            void $("#save-error").html("Error: invalid name");
        {
            var b = this.getBufferFromWaypoints(!1);
            this.getTotalTimeAndDistance().t
        }
        if (g_user) {
            var c = this
              , d = c.currMission.parseMission
              , e = !1
              , f = d ? c.currMission.parseMission.get("name") != a : !1;
            (!d || f) && (d = new c.ParseMission,
            e = !0);
            var g = new Parse.Query("Mission");
            g.equalTo("user", g_user),
            g.equalTo("name", a),
            e || g.notEqualTo("objectId", d.id),
            g.find({
                success: function(f) {
                    if (0 == f.length) {
                        var g = new Uint8Array(b)
                          , h = Array.prototype.slice.call(g)
                          , i = new Parse.File("mission",h);
                        i.save().then(function() {
                            if (d.set("name", a),
                            d.set("user", g_user),
                            d.set("file", i),
                            e) {
                                var b = new Parse.ACL(g_user);
                                b.setPublicReadAccess(!0),
                                b.setPublicWriteAccess(!1),
                                d.setACL(b)
                            } else
                                d.set("version", d.get("version"));
                            c.isClone && d.set("isClone", !0);
                            var f = new Parse.GeoPoint({
                                latitude: c.markerToWaypoints[0].wp.latitude,
                                longitude: c.markerToWaypoints[0].wp.longitude
                            });
                            d.set("location", f),
                            d.save(null , {
                                success: function(a) {
                                    c.currMission.parseMission = a,
                                    c.refreshTotalTimeAndDistance(),
                                    c.writeURLParam(a.id),
                                    c.myMissions = {},
                                    c.syncMyDevices(),
                                    $("#downloadalert").modal("hide")
                                },
                                error: function(a, b) {
                                    $("#save-error-div").show(),
                                    $("#save-error").html("Error: " + b.message)
                                }
                            })
                        }, function(a) {
                            $("#downloadalert").modal("hide")
                        })
                    } else
                        $("#save-error-div").show(),
                        $("#save-error").html("Error: a mission with this name already exists")
                },
                error: function(a) {
                    $("#downloadalert").modal("hide")
                }
            })
        } else
            $("#downloadalert").modal("hide"),
            this.triggerDownload(b, a)
    },
    saveCSVtoFile: function(a, b) {
        if (this.detectIE()) {
            var c = new Blob([a],{
                type: "text/csv;charset=utf-8;"
            });
            navigator.msSaveBlob(c, b)
        } else {
            var d = navigator.userAgent.indexOf("Chrome") > -1
              , e = navigator.userAgent.indexOf("Safari") > -1;
            if (d && e && (e = !1),
            e)
                $.ajax({
                    type: "POST",
                    url: "/geturl",
                    data: {
                        t: "c",
                        buf: a
                    },
                    dataType: "json"
                }).success(function(a) {
                    window.location.assign(a.n + "&t=c&n=" + encodeURIComponent(b))
                }).fail(function() {});
            else {
                var f = $("<a>");
                if (void 0 !== f.get(0).download) {
                    var c = new Blob([a],{
                        type: "text/csv;charset=utf-8;"
                    })
                      , g = URL.createObjectURL(c);
                    f.get(0).setAttribute("href", g),
                    f.get(0).setAttribute("download", b),
                    f.get(0).style.opacity = 0,
                    $("body").append(f),
                    f.show().focus();
                    var h = document.createEvent("MouseEvents");
                    h.initEvent("click", !1, !1),
                    f.get(0).dispatchEvent(h),
                    f.hide(),
                    f.remove()
                }
            }
        }
    },
    triggerDownload: function(a, b) {
        if (this.detectIE()) {
            var c = new Blob([a],{
                type: "data:application/octet-stream"
            });
            navigator.msSaveBlob(c, b)
        } else {
            var d = navigator.userAgent.indexOf("Chrome") > -1
              , e = navigator.userAgent.indexOf("Safari") > -1;
            d && e && (e = !1);
            var f = this.getBase64FromBuffer(a, !1);
            if (e)
                $.ajax({
                    type: "POST",
                    url: "/geturl",
                    data: {
                        t: "l",
                        buf: f
                    },
                    dataType: "json"
                }).success(function(a) {
                    window.location.assign(a.n + "&t=l&n=" + encodeURIComponent(b))
                }).fail(function() {});
            else {
                var g = $('<a href="data:application/octet-stream;base64,' + f + '" download="' + b + '">');
                g.get(0).style.opacity = 0,
                $("body").append(g),
                g.show().focus();
                var h = document.createEvent("MouseEvents");
                h.initEvent("click", !1, !1),
                g.get(0).dispatchEvent(h),
                g.hide(),
                g.remove()
            }
        }
    },
    syncMyDevices: function() {
        Parse.Cloud.run("syncMyDevices", {}, function(a, b) {}, function(a) {
            console.log("err", a)
        })
    },
    loadFromCloud: function(a) {
        this.reset();
        var b = this;
        Parse.Cloud.run("getMission", {
            url: a.get("file").url()
        }, function(a) {
            var c = a.buffer;
            b.loadMissionFromArrayBuffer(Uint8Array.from(c).buffer)
        }, function(a) {})
    },
    getBufferFromWaypoints: function(a) {
        var b = 0;
        b = a ? 1 : 4;
        for (var c = 36, d = 56, e = 4 + this.markerToWaypoints.length * d, f = 0; f < this.markerToWaypoints.length; ++f) {
            var g = this.markerToWaypoints[f].wp;
            g.numActions > 0 && (e += 8 * g.numActions)
        }
        var h = 4 + (null != this.poiMarkers ? 20 * this.poiMarkers.length : 0)
          , i = new ArrayBuffer(b + c + e + h)
          , j = new DataView(i,0);
        a ? j.setInt8(0, GStool.VERSION) : j.setInt32(0, 1818454125);
        var k = b;
        j.setInt32(k, this.currMission.headingMode),
        k += 4,
        j.setInt32(k, this.currMission.finishAction),
        k += 4,
        j.setInt32(k, this.currMission.pathMode),
        k += 4,
        j.setFloat32(k, Math.max(-15, Math.min(15, this.currMission.horizontalSpeed))),
        k += 4,
        j.setFloat32(k, Math.max(2, Math.min(15, this.currMission.rcSpeed))),
        k += 4,
        j.setInt32(k, this.currMission.repeatNum),
        k += 4,
        j.setInt16(k, GStool.MISSION_CURR_VERSION),
        k += 2,
        j.setInt16(k, 0),
        k += 2,
        j.setInt32(b + c, this.markerToWaypoints.length),
        k = b + c + 4;
        for (var f = 0; f < this.markerToWaypoints.length; ++f) {
            var g = this.markerToWaypoints[f].wp;
            j.setFloat32(k, g.altitude),
            j.setInt32(k + 4, g.turnMode),
            j.setFloat32(k + 8, g.heading),
            j.setFloat32(k + 12, g.speed),
            j.setInt16(k + 16, g.stayTime),
            j.setInt16(k + 18, g.maxReachTime),
            j.setFloat64(k + 20, g.latitude),
            j.setFloat64(k + 28, g.longitude),
            j.setFloat32(k + 36, Math.max(.2, Math.min(1e3, g.dampingDistance))),
            j.setInt32(k + 40, g.gimbalCtrl),
            j.setInt32(k + 44, g.gimbalPitchAngle),
            j.setInt32(k + 48, g.numActions),
            j.setInt32(k + 52, g.repeatActions);
            var l = k + 56;
            if (g.numActions > 0)
                for (var m = 0; m < g.numActions; ++m)
                    j.setInt32(l, g.actions[m]),
                    l += 4,
                    j.setInt32(l, g.actionParams[m]),
                    l += 4;
            k += d + 8 * g.numActions
        }
        if (j.setInt32(b + c + e, null != this.poiMarkers ? this.poiMarkers.length : 0),
        null != this.poiMarkers) {
            k = b + c + e + 4;
            for (var m = 0; m < this.poiMarkers.length; ++m) {
                var n = this.poiMarkers[m].poi;
                j.setFloat64(k, n.latitude),
                k += 8,
                j.setFloat64(k, n.longitude),
                k += 8,
                j.setFloat32(k, n.altitude),
                k += 4
            }
        }
        return i
    },
    getBase64FromWaypoints: function(a, b) {
        var c = this.getBufferFromWaypoints(!1)
          , d = this.getBase64FromBuffer(c, b);
        return d
    },
    getBase64FromBuffer: function(a, b) {
        for (var c = "", d = new Uint8Array(a), e = d.byteLength, f = 0; e > f; f++)
            c += String.fromCharCode(d[f]);
        return b ? LZString.compressToBase64(c) : window.btoa(c)
    },
    getBufferFromString: function(a) {
        for (var b = new Uint8Array(a.length), c = 0; c < a.length; c++)
            b[c] = a[c].charCodeAt(0);
        return b
    },
    hideWPSettings: function() {
        $("#wpsettings").is(":visible") && (this.deselectCurrentSelection(),
        $("#wpsettings").hide(),
        this.currIdx = null )
    },
    deselectCurrentSelection: function() {
        if (null !== this.currIdx)
            if (this.currIdx >= 0 && this.currIdx < this.markerToWaypoints.length)
                this.markerToWaypoints[this.currIdx].marker.setIcon(this.getWPIcon(this.currIdx + 1, this.markerToWaypoints[this.currIdx].wp.altitude, !1));
            else {
                var a = this.currIdx < 0 && Math.abs(this.currIdx) <= this.poiMarkers.length ? Math.abs(this.currIdx) - 1 : null ;
                null != a && this.poiMarkers[a].marker.setIcon(this.getPOIIcon(Math.abs(this.currIdx), this.poiMarkers[a].poi.altitude, !1))
            }
    },
    updatePOISelection: function(a) {
        var b = this.markerToWaypoints[this.currIdx];
        -1 == a ? (b.wp.targetPoi = null ,
        b.wp.manualHeadingOverride = !0,
        $("#field-poi-selected").text("None")) : (b.wp.targetPoi = this.poiMarkers[a],
        $("#field-poi-selected").text(parseInt(a) + 1),
        b.wp.manualHeadingOverride = !1,
        b.wp.heading = this.computeOneWPHeadingFromGSPOI(b, b.wp.targetPoi),
        this.updateOneGSHeadingRotation(this.currIdx),
        this.updateHESlider(this.getDisplayedHeading(b.wp.heading)),
        this.updateGimbalMode(b.wp.gimbalCtrl),
        this.refreshHash())
    },
    updatePOIDropdown: function() {
        var a = this
          , b = this.markerToWaypoints[this.currIdx];
        $("#field-poi-dropdown").html("");
        var c = $("<li>")
          , d = $("<a>")
          , e = d.get(0);
        e.style.cursor = "pointer",
        d.text("None"),
        d.on("click", function(b) {
            return function() {
                a.updatePOISelection(b)
            }
        }(-1)),
        c.append(d),
        $("#field-poi-dropdown").append(c);
        var f = !1;
        for (var g in this.poiMarkers) {
            var c = $("<li>")
              , d = $("<a>")
              , e = d.get(0);
            e.style.cursor = "pointer",
            d.text(parseInt(g) + 1),
            d.on("click", function(b) {
                return function() {
                    a.updatePOISelection(b)
                }
            }(g)),
            b.wp.targetPoi && b.wp.targetPoi == this.poiMarkers[g] && ($("#field-poi-selected").text(parseInt(g) + 1),
            f = !0),
            c.append(d),
            $("#field-poi-dropdown").append(c)
        }
        f || $("#field-poi-selected").text("None")
    },
    updateGimbalMode: function(a) {
        a = parseInt(a);
        var b = this.markerToWaypoints[this.currIdx].wp;
        switch (b.gimbalCtrl = a,
        a) {
        case 0:
            $("#gpitchangle").hide();
            break;
        case 1:
            $("#gpitchangle").show(),
            $("#altgpitch").attr("disabled", "disabled");
            var c = 0;
            if (b.targetPoi) {
                var d = google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(b.latitude,b.longitude), new google.maps.LatLng(b.targetPoi.poi.latitude,b.targetPoi.poi.longitude));
                b.gimbalPitchAngle = -(180 * Math.atan((b.altitude - b.targetPoi.poi.altitude) / d) / Math.PI),
                b.gimbalPitchAngle = Math.max(-90, Math.min(30, b.gimbalPitchAngle)),
                c = b.gimbalPitchAngle
            }
            this.updateGimbalPitchAngle(c);
            break;
        case 2:
            $("#gpitchangle").show(),
            $("#altgpitch").removeAttr("disabled"),
            this.updateGimbalPitchAngle(b.gimbalPitchAngle)
        }
    },
    updateGimbalPitchAngle: function(a) {
        this.markerToWaypoints[this.currIdx].wp.gimbalPitchAngle = a,
        $("#altgpitch").val(Math.round(a) + "Â°")
    },
    updateCurrentSelection: function(a, b) {
        if (a >= 0 && a > this.markerToWaypoints.length - 1)
            return void this.hideWPSettings();
        if (0 > a && Math.abs(a) > this.poiMarkers.length)
            return void this.hideWPSettings();
        this.deselectCurrentSelection(),
        this.currIdx = a;
        var c = 0 > a
          , d = null ;
        if (c ? (this.poiMarkers[Math.abs(a) - 1].marker.setIcon(this.getPOIIcon(Math.abs(a), this.poiMarkers[Math.abs(a) - 1].poi.altitude, !0)),
        d = this.poiMarkers[Math.abs(a) - 1].poi) : (this.markerToWaypoints[a].marker.setIcon(this.getWPIcon(a + 1, this.markerToWaypoints[a].wp.altitude, !0)),
        d = this.markerToWaypoints[this.currIdx].wp),
        this.updateLatLongET(d.latitude, d.longitude),
        this.updateAltSlider(d.altitude),
        !c) {
            if (this.updateSpeedSlider(d.speed),
            this.updateStaytimeSlider(d.stayTime),
            this.setMaxDamping(this.currIdx),
            this.updateCSSlider(d.dampingDistance),
            this.updateHESlider(this.getDisplayedHeading(d.heading)),
            $("#checkbox-banked").get(0).checked = d.turnMode ? !0 : !1,
            this.updatePOIDropdown(),
            $("input[name=gpitchctrlradio][id=option" + d.gimbalCtrl + "]").click(),
            this.updateGimbalMode(d.gimbalCtrl),
            $("#actionlist").html(""),
            d.actions.length > 0)
                for (var e in d.actions)
                    this.addAction(parseInt(e), d.actions[e], d.actionParams[e]);
            this.refreshNumActions()
        }
        this.getElevation(new google.maps.LatLng(d.latitude,d.longitude)),
        $("#wpsettingslabel").text((c ? "POI " + Math.abs(a) : "WAYPOINT " + (a + 1)) + " SETTINGS"),
        c || this.currIdx == this.markerToWaypoints.length - 1 ? $("#inswp").hide() : $("#inswp").show(),
        c ? ($("#field-poi").hide(),
        $("#field-cs").hide(),
        $("#field-he").hide(),
        $("#field-speed").hide(),
        $("#field-gctrl").hide(),
        $("#field-actions").hide()) : 1 == this.acType && ($("#field-gctrl").show(),
        $("#field-poi").show(),
        $("#field-cs").show(),
        $("#field-he").show(),
        $("#field-speed").show(),
        $("#field-actions").show()),
        $("#wpsettings").show(),
        b && this.map.panTo(c ? this.poiMarkers[Math.abs(this.currIdx) - 1].marker.getPosition() : this.markerToWaypoints[this.currIdx].marker.getPosition()),
        google.maps.event.trigger(this.map, "resize")
    },
    addPOI: function(a, b, c) {
        if (1 == this.acType) {
            var d = new google.maps.Marker({
                position: a,
                map: this.map,
                draggable: !0,
                icon: this.getPOIIcon(this.poiMarkers.length + 1, b, !1)
            })
              , e = this;
            google.maps.event.addListener(d, "click", function() {
                for (var a = null , b = 0; b < e.poiMarkers.length; ++b)
                    if (e.poiMarkers[b].marker == d) {
                        a = b;
                        break
                    }
                e.updateCurrentSelection(-(a + 1), !1)
            }),
            google.maps.event.addListener(d, "drag", function() {
                return e.movingEnabled ? void e.moveMissionToLocation.call(e, d.position, -(e.movingIndex + 1), 0) : e.scalingEnabled ? void e.scaleMission(d.position, -(e.movingIndex + 1), 0) : e.rotateEnabled && e.rotateMarker ? void e.rotateMission(d.position, 0) : void e.repositionPOI.call(e, d)
            }),
            google.maps.event.addListener(d, "dragend", function() {
                if (e.ignoreNextClick = !0,
                window.setTimeout(function() {
                    e.ignoreNextClick = !1
                }, 250),
                e.movingEnabled)
                    return e.moveMissionToLocation.call(e, d.position, -(e.movingIndex + 1), 1),
                    void e.refreshMissionLine.call(e);
                if (e.scalingEnabled) {
                    for (var a in e.markerToWaypoints)
                        if (a >= 1 && a < e.markerToWaypoints.length - 1) {
                            a = parseInt(a);
                            var b = e.getMaxDamping(a)
                              , c = e.markerToWaypoints[a];
                            c && (c.wp.dampingDistance = Math.min(b, Math.max(c.wp.dampingDistance, .2)))
                        }
                    return e.refreshMissionLine.call(e),
                    void (null !== e.currIdx && e.currIdx < 0 && e.getElevation(new google.maps.LatLng(e.poiMarkers[Math.abs(e.currIdx) - 1].poi.latitude,e.poiMarkers[Math.abs(e.currIdx) - 1].poi.longitude)))
                }
                if (e.rotateEnabled && e.rotateMarker) {
                    e.movingIndex >= 0 && e.poiMarkers[e.movingIndex].marker.setOpacity(1),
                    e.refreshMissionLine.call(e);
                    for (var a in e.poiMarkers)
                        e.computeHeadingsForGSPOI(e.poiMarkers[a]);
                    return e.refreshGSHeadings(!1),
                    void (null !== e.currIdx && e.currIdx < 0 && e.getElevation(new google.maps.LatLng(e.poiMarkers[Math.abs(e.currIdx) - 1].poi.latitude,e.poiMarkers[Math.abs(e.currIdx) - 1].poi.longitude)))
                }
                e.repositionPOI.call(e, d, !0),
                e.refreshHash()
            }),
            google.maps.event.addListener(d, "dragstart", function() {
                return e.movingEnabled ? (e.setMovingIndexFromPOI.call(e, d),
                void e.moveMissionToLocation.call(e, d.position, -(e.movingIndex + 1), -1)) : e.scalingEnabled ? (e.setMovingIndexFromPOI.call(e, d),
                void e.scaleMission(d.position, -(e.movingIndex + 1), -1)) : e.rotateEnabled && e.rotateMarker ? (e.setMovingIndexFromPOI.call(e, d),
                e.movingIndex >= 0 && e.poiMarkers[e.movingIndex].marker.setOpacity(0),
                void e.rotateMission(d.position, -1)) : void e.repositionPOI.call(e, d)
            });
            var f = new GSPOI;
            f.altitude = b,
            f.latitude = a.lat(),
            f.longitude = a.lng(),
            this.poiMarkers.push({
                poi: f,
                marker: d
            }),
            this._refreshGSHeadings(c, null , !c)
        }
    },
    addWaypoint: function(a, b, c, d, e, f, g, h, i, j, k) {
        var l = (k && k > 0 ? k : this.markerToWaypoints.length) + 1
          , m = new google.maps.LatLng(b,c)
          , n = new GSWaypoint;
        n.latitude = m.lat(),
        n.longitude = m.lng(),
        n.altitude = d,
        n.speed = e,
        n.turnMode = g,
        n.heading = i,
        n.maxReachTime = h,
        n.stayTime = f,
        n.dampingDistance = .2,
        null != this.lastWP && (n.altitude = this.lastWP.altitude,
        0 == this.acType && (n.speed = this.lastWP.speed),
        n.turnMode = this.lastWP.turnMode,
        n.stayTime = this.lastWP.stayTime,
        n.heading = this.lastWP.heading);
        var o = new google.maps.Marker({
            position: m,
            map: this.map,
            draggable: !0,
            icon: this.getWPIcon(l, j ? j.altitude : n.altitude, !1)
        })
          , p = this;
        google.maps.event.addListener(o, "click", function(a) {
            for (var b = null , c = 0; c < p.markerToWaypoints.length; ++c)
                if (p.markerToWaypoints[c].marker == o) {
                    b = c;
                    break
                }
            return g_ctrlkeydown && p.rotateEnabled && p.rotateMarker ? void p.fixedRotate() : void p.updateCurrentSelection(b, !1)
        }),
        google.maps.event.addListener(o, "drag", function() {
            return p.movingEnabled ? void p.moveMissionToLocation(o.position, p.movingIndex, 0) : p.scalingEnabled ? void p.scaleMission(o.position, p.movingIndex, 0) : p.rotateEnabled && p.rotateMarker ? void p.rotateMission(o.position, 0) : void p.repositionWP.call(p, o)
        }),
        google.maps.event.addListener(o, "dragend", function() {
            if (p.ignoreNextClick = !0,
            window.setTimeout(function() {
                p.ignoreNextClick = !1
            }, 250),
            p.movingEnabled)
                return p.moveMissionToLocation(o.position, p.movingIndex, 1),
                void p.refreshMissionLine.call(p);
            if (p.scalingEnabled) {
                for (var a in p.markerToWaypoints)
                    if (a >= 1 && a < p.markerToWaypoints.length - 1) {
                        a = parseInt(a);
                        var b = p.getMaxDamping(a)
                          , c = p.markerToWaypoints[a];
                        c && (c.wp.dampingDistance = Math.min(b, Math.max(c.wp.dampingDistance, .2)))
                    }
                return p.refreshMissionLine.call(p),
                void (null !== p.currIdx && p.currIdx >= 0 && p.getElevation(new google.maps.LatLng(p.markerToWaypoints[p.currIdx].wp.latitude,p.markerToWaypoints[p.currIdx].wp.longitude)))
            }
            if (p.rotateEnabled && p.rotateMarker) {
                p.movingIndex >= 0 && p.markerToWaypoints[p.movingIndex].marker.setOpacity(1),
                p.refreshMissionLine.call(p);
                for (var a in p.poiMarkers)
                    p.computeHeadingsForGSPOI(p.poiMarkers[a]);
                return p.refreshGSHeadings(!1),
                void (null !== p.currIdx && p.currIdx >= 0 && p.getElevation(new google.maps.LatLng(p.markerToWaypoints[p.currIdx].wp.latitude,p.markerToWaypoints[p.currIdx].wp.longitude)))
            }
            p.repositionWP.call(p, o, !0),
            p.refreshHash()
        }),
        google.maps.event.addListener(o, "dragstart", function() {
            return p.movingEnabled ? (p.setMovingIndex.call(p, o),
            void p.moveMissionToLocation(o.position, p.movingIndex, -1)) : p.scalingEnabled ? (p.setMovingIndex.call(p, o),
            void p.scaleMission(o.position, p.movingIndex, -1)) : p.rotateEnabled && p.rotateMarker ? (p.setMovingIndex.call(p, o),
            p.movingIndex >= 0 && p.markerToWaypoints[p.movingIndex].marker.setOpacity(0),
            void p.rotateMission(o.position, -1)) : void p.repositionWP.call(p, o)
        });
        var q = {
            marker: o,
            wp: j ? j : n
        };
        k && k > 0 ? this.markerToWaypoints.splice(k, 0, q) : this.markerToWaypoints.push(q),
        a || (n.heading = p.computeOneWPHeadingFromGSPOI(q, p.getClosestPOI(new google.maps.LatLng(q.wp.latitude,q.wp.longitude))));
        var r = k && k > 0 ? k : this.markerToWaypoints.length - 1;
        if (r > 1) {
            var s = r - 1
              , t = this.markerToWaypoints[s];
            if (t) {
                var u = this.getMaxDamping(s)
                  , v = t.wp.dampingDistance;
                a || (v = this.computeDefaultDamping(s)),
                t.wp.dampingDistance = Math.min(u, Math.max(v, .2))
            }
        }
        a || this.refreshHash()
    },
    fixedRotate: function() {
        var a = this
          , b = 45;
        for (var c in this.markerToWaypoints) {
            var d = this.markerToWaypoints[c]
              , e = google.maps.geometry.spherical.computeDistanceBetween(this.rotateMarker.position, d.marker.position)
              , f = google.maps.geometry.spherical.computeHeading(this.rotateMarker.position, d.marker.position)
              , g = google.maps.geometry.spherical.computeOffset(this.rotateMarker.position, e, f + b);
            d.wp.latitude = g.lat(),
            d.wp.longitude = g.lng(),
            d.marker.setPosition(g),
            this.currIdx == c && this.updateLatLongET(d.wp.latitude, d.wp.longitude)
        }
        for (var c in this.poiMarkers) {
            var d = this.poiMarkers[c]
              , e = google.maps.geometry.spherical.computeDistanceBetween(this.rotateMarker.position, d.marker.position)
              , f = google.maps.geometry.spherical.computeHeading(this.rotateMarker.position, d.marker.position)
              , g = google.maps.geometry.spherical.computeOffset(this.rotateMarker.position, e, f + b);
            d.poi.latitude = g.lat(),
            d.poi.longitude = g.lng(),
            d.marker.setPosition(g),
            this.currIdx < 0 && Math.abs(this.currIdx) - 1 == c && this.updateLatLongET(d.poi.latitude, d.poi.longitude)
        }
        a.refreshMissionLine.call(a);
        for (var c in a.poiMarkers)
            a.computeHeadingsForGSPOI(a.poiMarkers[c]);
        a.refreshGSHeadings(!1),
        null !== a.currIdx && a.currIdx >= 0 && a.getElevation(new google.maps.LatLng(a.markerToWaypoints[a.currIdx].wp.latitude,a.markerToWaypoints[a.currIdx].wp.longitude))
    },
    computeOneWPHeadingFromGSPOI: function(a, b) {
        var c = a.wp.heading;
        return this.poiMarkers.length > 0 && b && (a.wp.targetPoi = b,
        c = Math.round(google.maps.geometry.spherical.computeHeading(a.marker.getPosition(), b.marker.getPosition()))),
        c
    },
    repositionMarker: function(a) {
        var b = 0 > a ? this.poiMarkers[Math.abs(a) - 1] : this.markerToWaypoints[a]
          , c = 0 > a ? b.poi : b.wp
          , d = new google.maps.LatLng(c.latitude,c.longitude);
        b.marker.setPosition(d),
        this.refreshMissionLine(),
        this.refreshGSHeadings(!1),
        a >= 0 && this.updateGimbalMode(c.gimbalCtrl),
        this.getElevation(d),
        this.refreshTotalTimeAndDistance(),
        this.refreshHash()
    },
    refreshMissionCurves: function(a) {
        for (var b in this.curves)
            this.curves[b].setMap(null );
        if (this.curves = [],
        !(a || this.markerToWaypoints.length <= 2))
            for (var b in this.markerToWaypoints)
                b > 0 && b < this.markerToWaypoints.length - 1 && this.curves.push(this.refreshOneCurve(parseInt(b), !1))
    },
    setAltitudesRelativeToGround: function() {
        if (!(this.markerToWaypoints.length <= 0)) {
            for (var a = this, b = [], c = 0; c < this.markerToWaypoints.length; ++c)
                b.push(new google.maps.LatLng(this.markerToWaypoints[c].wp.latitude,this.markerToWaypoints[c].wp.longitude));
            this.elevator.getElevationForLocations({
                locations: b
            }, function(c, d) {
                if (d === google.maps.ElevationStatus.OK) {
                    if (c && c.length == b.length) {
                        for (var e = c[0].elevation, f = 1; f < a.markerToWaypoints.length; ++f)
                            a.markerToWaypoints[f].wp.altitude = a.markerToWaypoints[f].wp.altitude + (c[f].elevation - e),
                            a.markerToWaypoints[f].marker.setIcon(a.getWPIcon(f + 1, a.markerToWaypoints[f].wp.altitude, !1));
                        a.refreshMissionLine(),
                        a.refreshTotalTimeAndDistance(),
                        a.refreshGSHeadings(!1)
                    }
                } else
                    console.log("Elevation service failed due to: " + d)
            })
        }
    },
    getElevation: function(a) {
        if (this.markerToWaypoints.length <= 0)
            return void $("#wp-elevation").hide();
        var b = this
          , c = new google.maps.LatLng(this.markerToWaypoints[0].wp.latitude,this.markerToWaypoints[0].wp.longitude);
        this.elevator.getElevationForLocations({
            locations: [c, a]
        }, function(a, c) {
            if (c === google.maps.ElevationStatus.OK)
                if (a && 2 == a.length) {
                    var d = Math.abs(a[0].elevation - a[1].elevation)
                      , e = b.formatDistance(d, !0) + " " + (a[0].elevation < a[1].elevation ? "above" : "below");
                    $("#wp-elevation").text("Ground Elevation: " + b.formatDistance(a[1].elevation, !0) + " (" + e + " first waypoint)").show()
                } else
                    $("#wp-elevation").hide();
            else
                $("#wp-elevation").hide(),
                console.log("Elevation service failed due to: " + c)
        })
    },
    getQuadraticBezierCoordFor: function(a, b, c, d) {
        var e = Math.pow(1 - d, 2) * a.lat() + 2 * (1 - d) * d * b.lat() + Math.pow(d, 2) * c.lat()
          , f = Math.pow(1 - d, 2) * a.lng() + 2 * (1 - d) * d * b.lng() + Math.pow(d, 2) * c.lng();
        return new google.maps.LatLng(e,f)
    },
    getQuadraticBezierPointFor: function(a, b, c, d) {
        var e = Math.pow(1 - d, 2) * a.x + 2 * (1 - d) * d * b.x + Math.pow(d, 2) * c.x
          , f = Math.pow(1 - d, 2) * a.y + 2 * (1 - d) * d * b.y + Math.pow(d, 2) * c.y;
        return new google.maps.Point(e,f)
    },
    isCurveUseful: function() {
        return this.currIdx > 0 && this.currIdx < this.markerToWaypoints.length - 1
    },
    setMaxDamping: function(a) {
        var b = this.markerToWaypoints[a].wp;
        this.isCurveUseful() ? this.maxDamping = this.getMaxDamping(a) : this.maxDamping = .2,
        this.sliderCs.slider("setAttribute", "max", parseInt(this.maxDamping)),
        this.updateCSSlider(Math.max(.2, Math.min(this.maxDamping, b.dampingDistance)))
    },
    computeDefaultDamping: function(a) {
        var b = this.markerToWaypoints[a - 1]
          , c = this.markerToWaypoints[a]
          , d = this.markerToWaypoints[a + 1]
          , e = google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(b.wp.latitude,b.wp.longitude), new google.maps.LatLng(c.wp.latitude,c.wp.longitude))
          , f = google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(c.wp.latitude,c.wp.longitude), new google.maps.LatLng(d.wp.latitude,d.wp.longitude))
          , g = e;
        a > 1 && (g -= b.wp.dampingDistance),
        g = Math.min(g, e / 2);
        var h = f / 2
          , i = Math.min(g, h)
          , j = i * (this.defaultCurveSize / 100);
        return j = Math.max(.2, Math.min(1e3, j))
    },
    getMaxDamping: function(a) {
        var b = this.markerToWaypoints[a - 1]
          , c = this.markerToWaypoints[a]
          , d = this.markerToWaypoints[a + 1]
          , e = google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(b.wp.latitude,b.wp.longitude), new google.maps.LatLng(c.wp.latitude,c.wp.longitude));
        a > 1 && (e -= b.wp.dampingDistance);
        var f = google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(c.wp.latitude,c.wp.longitude), new google.maps.LatLng(d.wp.latitude,d.wp.longitude));
        a < this.markerToWaypoints.length - 2 && (f -= d.wp.dampingDistance);
        var g = Math.min(e, f);
        return Math.min(1e3, Math.max(.2, g - 1))
    },
    refreshOneCurve: function(a, b) {
        if (b && 0 == this.curves.length)
            return this.refreshMissionCurves(),
            null ;
        var c = this.markerToWaypoints[a - 1]
          , d = this.markerToWaypoints[a]
          , e = this.markerToWaypoints[a + 1]
          , f = google.maps.geometry.spherical.computeHeading(d.marker.getPosition(), c.marker.getPosition())
          , g = d.marker.position
          , h = google.maps.geometry.spherical.computeOffset(g, d.wp.dampingDistance, f);
        f = google.maps.geometry.spherical.computeHeading(d.marker.getPosition(), e.marker.getPosition());
        for (var i = google.maps.geometry.spherical.computeOffset(g, d.wp.dampingDistance, f), j = [], k = 0, l = 20, m = 0; l >= m; ++m) {
            k = 1 / l * m;
            var n = this.getQuadraticBezierCoordFor(h, g, i, k);
            j.push(n)
        }
        var o = new google.maps.Polyline({
            path: j,
            strokeColor: "#00ffff",
            strokeOpacity: 1,
            strokeWeight: 2
        });
        if (1 == this.acType && 1 == this.currMission.pathMode && o.setMap(this.map),
        b) {
            var p = this.curves[a - 1];
            p.setMap(null ),
            this.curves[a - 1] = o
        }
        return o
    },
    repositionPOI: function(a, b) {
        for (var c = null , d = 0; d < this.poiMarkers.length; ++d)
            if (this.poiMarkers[d].marker == a) {
                c = d;
                break
            }
        if (null != c) {
            (this.currIdx >= 0 || c != Math.abs(this.currIdx) - 1) && this.updateCurrentSelection(-(c + 1), !1);
            var e = this.poiMarkers[c].poi;
            e.latitude = a.getPosition().lat(),
            e.longitude = a.getPosition().lng(),
            this._refreshGSHeadings(!1, this.poiMarkers[c], !1),
            this.updateLatLongET(e.latitude, e.longitude),
            b && this.getElevation(new google.maps.LatLng(e.latitude,e.longitude))
        }
    },
    repositionWP: function(a, b) {
        for (var c = null , d = 0; d < this.markerToWaypoints.length; ++d)
            if (this.markerToWaypoints[d].marker == a) {
                c = d;
                break
            }
        if (null != c) {
            c != this.currIdx && this.updateCurrentSelection(c, !1),
            this.setMaxDamping(c);
            var e = this.markerToWaypoints[c].wp;
            if (e.latitude = a.getPosition().lat(),
            e.longitude = a.getPosition().lng(),
            null == this.missionLine)
                this.refreshMissionLine();
            else {
                var f = this.markerToWaypoints.length;
                for (this.missionLine.getPath().setAt(c, new google.maps.LatLng(e.latitude,e.longitude)),
                d = c - 1; c + 1 >= d; ++d)
                    if (d >= 1 && f - 1 > d) {
                        var g = this.getMaxDamping(d)
                          , h = this.markerToWaypoints[d];
                        h && (h.wp.dampingDistance = Math.min(g, Math.max(h.wp.dampingDistance, .2))),
                        this.refreshOneCurve(d, !0)
                    }
                null != this.distOverlays && (this.distOverlays[c] && (this.distOverlays[c].setMap(null ),
                this.distOverlays[c] = this.getDistOverlay(a.position, this.markerToWaypoints[c + 1].marker.position)),
                c - 1 >= 0 && this.distOverlays[c - 1] && (this.distOverlays[c - 1].setMap(null ),
                this.distOverlays[c - 1] = this.getDistOverlay(this.markerToWaypoints[c - 1].marker.position, a.position)))
            }
            this.refreshTotalTimeAndDistance(),
            this.refreshOneGSHeading(c),
            this.updateGimbalMode(e.gimbalCtrl),
            this.updateLatLongET(e.latitude, e.longitude),
            b && this.getElevation(new google.maps.LatLng(e.latitude,e.longitude))
        }
    },
    setMovingIndex: function(a) {
        for (var b = null , c = 0; c < this.markerToWaypoints.length; ++c)
            if (this.markerToWaypoints[c].marker == a) {
                b = c;
                break
            }
        null != b && (this.movingIndex = b)
    },
    setMovingIndexFromPOI: function(a) {
        for (var b = null , c = 0; c < this.poiMarkers.length; ++c)
            if (this.poiMarkers[c].marker == a) {
                b = c;
                break
            }
        null != b && (this.movingIndex = b)
    },
    isForIndexValid: function(a) {
        return a >= 0 && this.markerToWaypoints.length < a + 1 ? !1 : 0 > a && this.poiMarkers.length < Math.abs(a) ? !1 : !0
    },
    rotateMission: function(a, b) {
        if (this.rotateMarker) {
            -1 == b && (this.bearingRef = google.maps.geometry.spherical.computeHeading(this.rotateMarker.position, a),
            this.movingRefs = []);
            var c = google.maps.geometry.spherical.computeHeading(this.rotateMarker.position, a)
              , d = c - this.bearingRef;
            for (var e in this.markerToWaypoints) {
                var f = this.markerToWaypoints[e];
                if (-1 == b) {
                    var g = google.maps.geometry.spherical.computeDistanceBetween(this.rotateMarker.position, f.marker.position)
                      , c = google.maps.geometry.spherical.computeHeading(this.rotateMarker.position, f.marker.position);
                    this.movingRefs[e] = {
                        d: g,
                        b: c
                    }
                }
                var h = google.maps.geometry.spherical.computeOffset(this.rotateMarker.position, this.movingRefs[e].d, this.movingRefs[e].b + d);
                f.wp.latitude = h.lat(),
                f.wp.longitude = h.lng(),
                f.marker.setPosition(h),
                this.currIdx == e && this.updateLatLongET(f.wp.latitude, f.wp.longitude)
            }
            for (var e in this.poiMarkers) {
                var f = this.poiMarkers[e];
                if (-1 == b) {
                    var g = google.maps.geometry.spherical.computeDistanceBetween(this.rotateMarker.position, f.marker.position)
                      , c = google.maps.geometry.spherical.computeHeading(this.rotateMarker.position, f.marker.position);
                    this.movingRefs[-(e + 1)] = {
                        d: g,
                        b: c
                    }
                }
                var h = google.maps.geometry.spherical.computeOffset(this.rotateMarker.position, this.movingRefs[-(e + 1)].d, this.movingRefs[-(e + 1)].b + d);
                f.poi.latitude = h.lat(),
                f.poi.longitude = h.lng(),
                f.marker.setPosition(h),
                this.currIdx < 0 && Math.abs(this.currIdx) - 1 == e && this.updateLatLongET(f.poi.latitude, f.poi.longitude)
            }
            this.refreshMissionLine(!0),
            this.refreshGSHeadings(!1, !0)
        }
    },
    scaleMission: function(a, b, c) {
        if (this.isForIndexValid(b)) {
            -1 == c && (this.movingRef = b >= 0 ? this.markerToWaypoints[b].marker.position : this.poiMarkers[Math.abs(b) - 1].marker.position,
            this.movingRefs = []);
            var d = google.maps.geometry.spherical.computeHeading(this.movingRef, a)
              , e = 1 + (0 > d ? -1 : 1) * (google.maps.geometry.spherical.computeDistanceBetween(this.movingRef, new google.maps.LatLng(this.movingRef.lat(),a.lng())) / 100);
            if (0 == c && 1 == e)
                return void (b >= 0 ? this.markerToWaypoints[b].marker.setOpacity(1) : this.poiMarkers[-(b + 1)].marker.setOpacity(1));
            for (var f in this.markerToWaypoints) {
                var g = this.markerToWaypoints[f];
                if (-1 == c) {
                    var h = google.maps.geometry.spherical.computeDistanceBetween(this.movingRef, g.marker.position)
                      , d = google.maps.geometry.spherical.computeHeading(this.movingRef, g.marker.position);
                    this.movingRefs[f] = {
                        d: h,
                        b: d
                    }
                }
                if (b != f) {
                    var i = google.maps.geometry.spherical.computeOffset(this.movingRef, this.movingRefs[f].d * e, this.movingRefs[f].b);
                    g.wp.latitude = i.lat(),
                    g.wp.longitude = i.lng(),
                    g.marker.setPosition(i),
                    this.currIdx == f && this.updateLatLongET(g.wp.latitude, g.wp.longitude)
                } else
                    g.marker.setPosition(this.movingRef),
                    g.marker.setOpacity(0)
            }
            for (var f in this.poiMarkers) {
                var g = this.poiMarkers[f];
                if (-1 == c) {
                    var h = google.maps.geometry.spherical.computeDistanceBetween(this.movingRef, g.marker.position)
                      , d = google.maps.geometry.spherical.computeHeading(this.movingRef, g.marker.position);
                    this.movingRefs[-(f + 1)] = {
                        d: h,
                        b: d
                    }
                }
                if (b != -(f + 1)) {
                    var i = google.maps.geometry.spherical.computeOffset(this.movingRef, this.movingRefs[-(f + 1)].d * e, this.movingRefs[-(f + 1)].b);
                    g.poi.latitude = i.lat(),
                    g.poi.longitude = i.lng(),
                    g.marker.setPosition(i),
                    this.currIdx < 0 && Math.abs(this.currIdx) - 1 == f && this.updateLatLongET(g.poi.latitude, g.poi.longitude)
                } else
                    g.marker.setPosition(this.movingRef),
                    g.marker.setOpacity(0)
            }
            this.refreshMissionLine(!0),
            this.refreshGSHeadings(!1, !0),
            this.refreshTotalTimeAndDistance()
        }
    },
    moveMissionToLocation: function(a, b, c) {
        if (this.isForIndexValid(b)) {
            -1 == c && (this.movingRef = b >= 0 ? this.markerToWaypoints[b].marker.position : this.poiMarkers[Math.abs(b) - 1].marker.position,
            this.movingRefs = []);
            for (var d in this.markerToWaypoints) {
                var e = this.markerToWaypoints[d];
                if (-1 == c) {
                    var f = google.maps.geometry.spherical.computeDistanceBetween(this.movingRef, e.marker.position)
                      , g = google.maps.geometry.spherical.computeHeading(this.movingRef, e.marker.position);
                    this.movingRefs[d] = {
                        d: f,
                        b: g
                    }
                }
                var h = google.maps.geometry.spherical.computeOffset(a, this.movingRefs[d].d, this.movingRefs[d].b);
                e.wp.latitude = h.lat(),
                e.wp.longitude = h.lng(),
                e.marker.setPosition(h),
                this.currIdx == d && (this.updateLatLongET(e.wp.latitude, e.wp.longitude),
                1 == c && this.getElevation(h))
            }
            for (var d in this.poiMarkers) {
                var e = this.poiMarkers[d];
                if (-1 == c) {
                    var f = google.maps.geometry.spherical.computeDistanceBetween(this.movingRef, e.marker.position)
                      , g = google.maps.geometry.spherical.computeHeading(this.movingRef, e.marker.position);
                    this.movingRefs[-(d + 1)] = {
                        d: f,
                        b: g
                    }
                }
                var h = google.maps.geometry.spherical.computeOffset(a, this.movingRefs[-(d + 1)].d, this.movingRefs[-(d + 1)].b);
                e.poi.latitude = h.lat(),
                e.poi.longitude = h.lng(),
                e.marker.setPosition(h),
                this.currIdx < 0 && Math.abs(this.currIdx) - 1 == d && (this.updateLatLongET(e.poi.latitude, e.poi.longitude),
                1 == c && this.getElevation(h))
            }
            this.refreshMissionLine(!0),
            this.refreshGSHeadings(!1, !0)
        }
    },
    isPointOnSegment: function(a, b, c) {
        var d, e, f = this.map.getProjection().fromLatLngToPoint(a), g = this.map.getProjection().fromLatLngToPoint(b), h = this.map.getProjection().fromLatLngToPoint(c);
        return g.x - f.x == 0 && g.y - f.y == 0 ? h.x == f.x && h.y == f.y : g.x - f.x == 0 && g.y - f.y != 0 ? (e = (h.y - f.y) / (g.y - f.y),
        h.x == f.x && e >= 0 && 1 >= e) : g.x - f.x != 0 && g.y - f.y == 0 ? (d = (h.x - f.x) / (g.x - f.x),
        h.y == f.y && d >= 0 && 1 >= d) : (d = (h.x - f.x) / (g.x - f.x),
        e = (h.y - f.y) / (g.y - f.y),
        console.log(d, e, d.toFixed(1), e.toFixed(1)),
        d.toFixed(1) == e.toFixed(1) && d >= 0 && 1 >= d && e >= 0 && 1 >= e)
    },
    getDistOverlay: function(a, b) {
        var c = this.getMidPoint(a.lat(), a.lng(), b.lat(), b.lng())
          , d = google.maps.geometry.spherical.computeDistanceBetween(a, b);
        return new DistOverlay(c,this.formatDistance(d),this.map)
    },
    refreshMissionLine: function(a) {
        if (null != this.missionLine && this.missionLine.setMap(null ),
        null != this.distOverlays)
            for (var b in this.distOverlays)
                this.distOverlays[b].setMap(null );
        this.distOverlays = [];
        for (var c = [], b = 0; b < this.markerToWaypoints.length; ++b)
            c.push(this.markerToWaypoints[b].marker.position),
            b + 1 < this.markerToWaypoints.length && this.distOverlays.push(this.getDistOverlay(this.markerToWaypoints[b].marker.position, this.markerToWaypoints[b + 1].marker.position));
        this.missionLine = new google.maps.Polyline({
            path: c,
            strokeColor: "#ffff00",
            strokeOpacity: 1,
            strokeWeight: 2
        }),
        this.missionLine.setMap(this.map),
        this.refreshMissionCurves(a)
    },
    handleLineMouseMove: function(a, b) {
        for (var c = this, d = b.latLng, e = null , f = 0; f < a.length - 1; ++f)
            if (c.isPointOnSegment(a[f], a[f + 1], d)) {
                e = google.maps.geometry.spherical.computeDistanceBetween(a[f], a[f + 1]);
                break
            }
        if (null != e) {
            var g = c.overlay.getProjection().fromLatLngToContainerPixel(d)
              , h = $("#mission-tooltip");
            h.html(c.formatDistance(e)).css({
                left: g.x + 15,
                top: g.y + 15
            }).show()
        }
    },
    plotElevation: function(a, b) {
        var c = document.getElementById("elevation_chart");
        if (b !== google.maps.ElevationStatus.OK)
            return void (c.innerHTML = "Cannot show elevation: request failed because " + b);
        var d = new google.visualization.ColumnChart(c)
          , e = new google.visualization.DataTable;
        e.addColumn("string", "Sample"),
        e.addColumn("number", "Elevation");
        for (var f = 0; f < a.length; f++)
            e.addRow(["", a[f].elevation]);
        d.draw(e, {
            height: 150,
            legend: "none",
            titleY: "Elevation (m)"
        })
    },
    formatTime: function(a) {
        return a > 60 ? Math.round(a / 60) + "min" : Math.round(a) + "s"
    },
    distance3DBetween: function(a, b, c, d) {
        var e = 0
          , f = google.maps.geometry.spherical.computeDistanceBetween(a, c)
          , g = Math.abs(b - d);
        return e = Math.sqrt(Math.pow(f, 2) + Math.pow(g, 2))
    },
    getMissionName: function() {
        var a = "new";
        return this.currMission.parseMission && (a = this.currMission.parseMission.get("name")),
        a
    },
    getTotalTimeAndDistance: function() {
        for (var a = 0, b = 0, c = this.currMission.horizontalSpeed, d = null , e = 0; e < this.markerToWaypoints.length; ++e) {
            var f = this.markerToWaypoints[e].wp;
            if (null != d) {
                var g = google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(d.latitude,d.longitude), new google.maps.LatLng(f.latitude,f.longitude))
                  , h = Math.abs(d.altitude - f.altitude)
                  , i = this.distance3DBetween(new google.maps.LatLng(d.latitude,d.longitude), d.altitude, this.markerToWaypoints[e].marker.position, f.altitude);
                a += i;
                var j = 15;
                h > 0 && (0 == g || h / g >= 1.5) && (j = 6);
                var k = d.speed;
                1 == this.acType && 0 >= k && (k = c),
                b += i / Math.max(.1, Math.min(j, k)) * 1.35,
                0 == this.acType && (b += f.stayTime)
            }
            if (f.numActions > 0)
                for (var l in f.actions)
                    0 == f.actions[l] && (b += f.actionParams[l] / 1e3);
            d = f
        }
        return {
            t: b,
            d: a
        }
    },
    refreshTotalTimeAndDistance: function() {
        var a = this.getTotalTimeAndDistance()
          , b = this.getMissionName() + " - " + this.formatDistance(a.d) + " | " + this.formatTime(a.t)
          , c = $("#label-distance").text();
        b != c && $("#label-distance").text(b)
    }
};
DistOverlay.prototype = new google.maps.OverlayView,
DistOverlay.prototype.onAdd = function() {
    var a = document.createElement("div");
    a.className = "distoverlay",
    a.innerText = this.text_,
    a.textContent = this.text_,
    this.div_ = a,
    this.clickable = !1;
    var b = this.getPanes();
    b.overlayShadow.appendChild(a)
}
,
DistOverlay.prototype.draw = function() {
    var a = this.getProjection()
      , b = a.fromLatLngToDivPixel(this.pos_)
      , c = this.div_;
    c.style.left = b.x - 10 + "px",
    c.style.top = b.y - 10 + "px"
}
,
DistOverlay.prototype.onRemove = function() {
    this.div_.parentNode.removeChild(this.div_),
    this.div_ = null
}
,
google.load("visualization", "1", {
    packages: ["columnchart"]
}),
google.maps.event.addDomListener(window, "load", GStool.initialize.bind(GStool));
